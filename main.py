import sys
import json
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLabel, QPushButton, QHBoxLayout, QLineEdit, QMessageBox, QSpacerItem, QSizePolicy, QDialog, QFormLayout, QSpinBox, QStackedWidget, QTabWidget,
    QListWidget, QInputDialog, QListWidgetItem, QGridLayout, QScrollArea, QColorDialog, QComboBox, QCheckBox, QFileDialog, QTextEdit, QSlider, QDialogButtonBox
)
from updater import UpdateManager, get_current_version
from update_settings_dialog import UpdateSettingsDialog
from PyQt5.QtCore import QTimer, Qt, pyqtSignal, QThread, pyqtSignal as QSignal, QSize
from PyQt5.QtGui import QIcon, QKeySequence, QClipboard, QPixmap, QPainter, QPen, QColor, QPalette, QFontDatabase
import keyboard
import os
import threading
from google_auth_oauthlib.flow import InstalledAppFlow
import requests
import asyncio
from aiohttp import web
import websockets
import datetime
import urllib.request
from io import BytesIO
import shutil
import base64
import secrets
import tempfile
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import subprocess

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Win32 API –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ö–æ—Ç–∫–µ–µ–≤ –≤ .exe
try:
    import ctypes
    from ctypes import wintypes
    USE_WIN32 = True
    print("HOTKEY: –ò—Å–ø–æ–ª—å–∑—É–µ–º Win32 API")
except ImportError:
    USE_WIN32 = False
    print("HOTKEY: Win32 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# Fallback –∫ pynput –∏ keyboard
try:
    from pynput import keyboard as pynput_keyboard
    USE_PYNPUT = True
    print("HOTKEY: pynput –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ fallback")
except ImportError:
    USE_PYNPUT = False
    print("HOTKEY: pynput –Ω–µ –Ω–∞–π–¥–µ–Ω")

# Win32 –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ö–æ—Ç–∫–µ–µ–≤
if USE_WIN32:
    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è RegisterHotKey (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    MOD_CONTROL = 0x0002
    MOD_SHIFT = 0x0004  
    MOD_ALT = 0x0001
    MOD_WIN = 0x0008
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è SetWindowsHookEx
    WH_KEYBOARD_LL = 13
    WM_KEYDOWN = 0x0100
    WM_KEYUP = 0x0101
    WM_SYSKEYDOWN = 0x0104
    WM_SYSKEYUP = 0x0105
    
    # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –∫–ª–∞–≤–∏—à
    VK_CONTROL = 0x11
    VK_SHIFT = 0x10
    VK_MENU = 0x12  # Alt
    VK_LWIN = 0x5B
    VK_RWIN = 0x5C
    
    # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –∫–ª–∞–≤–∏—à (—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã)
    VK_CODES = {
        'ctrl': MOD_CONTROL,
        'shift': MOD_SHIFT,
        'alt': MOD_ALT,
        'win': MOD_WIN,
        # –†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
        '–π': 0x51,  # Q
        '—Ü': 0x57,  # W  
        '—É': 0x45,  # E
        '–∫': 0x52,  # R
        '–µ': 0x54,  # T
        '–Ω': 0x59,  # Y
        '–≥': 0x55,  # U
        '—à': 0x49,  # I
        '—â': 0x4F,  # O
        '–∑': 0x50,  # P
        '—Ñ': 0x41,  # A
        '—ã': 0x53,  # S
        '–≤': 0x44,  # D
        '–∞': 0x46,  # F
        '–ø': 0x47,  # G
        '—Ä': 0x48,  # H
        '–æ': 0x4A,  # J
        '–ª': 0x4B,  # K
        '–¥': 0x4C,  # L
        '—è': 0x5A,  # Z
        '—á': 0x58,  # X
        '—Å': 0x43,  # C
        '–º': 0x56,  # V
        '–∏': 0x42,  # B
        '—Ç': 0x4E,  # N
        '—å': 0x4D,  # M
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã
        'a': 0x41, 'b': 0x42, 'c': 0x43, 'd': 0x44, 'e': 0x45,
        'f': 0x46, 'g': 0x47, 'h': 0x48, 'i': 0x49, 'j': 0x4A,
        'k': 0x4B, 'l': 0x4C, 'm': 0x4D, 'n': 0x4E, 'o': 0x4F,
        'p': 0x50, 'q': 0x51, 'r': 0x52, 's': 0x53, 't': 0x54,
        'u': 0x55, 'v': 0x56, 'w': 0x57, 'x': 0x58, 'y': 0x59, 'z': 0x5A,
        # –¶–∏—Ñ—Ä—ã
        '0': 0x30, '1': 0x31, '2': 0x32, '3': 0x33, '4': 0x34,
        '5': 0x35, '6': 0x36, '7': 0x37, '8': 0x38, '9': 0x39,
    }

    class Win32HotkeyListener:
        def __init__(self):
            self.hotkeys = {}  # {hotkey_string: callback}
            self.running = False
            self.hook = None
            self.active_modifiers = set()  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏-–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            self.active_key = None  # –ê–∫—Ç–∏–≤–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏—à–∞
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º HOOKPROC —Ç–∏–ø –¥–ª—è callback (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è PyInstaller)
            try:
                self.HOOKPROC = ctypes.WINFUNCTYPE(ctypes.c_int, ctypes.c_int, wintypes.WPARAM, wintypes.LPARAM)
            except:
                # Fallback –¥–ª—è PyInstaller
                self.HOOKPROC = ctypes.WINFUNCTYPE(ctypes.c_long, ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p)
            
        def register_hotkey(self, hotkey_str, callback):
            """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–æ—Ç–∫–µ–π –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —á–µ—Ä–µ–∑ keyboard hook"""
            try:
                # –ü–∞—Ä—Å–∏–º —Ö–æ—Ç–∫–µ–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                parts = [p.strip().lower() for p in hotkey_str.split('+')]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ–Ω—è—Ç–Ω—ã
                for part in parts:
                    if part not in ['ctrl', 'control', 'shift', 'alt', 'win'] and part not in VK_CODES:
                        print(f"HOTKEY: ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–ª–∞–≤–∏—à–∞: {part}")
                        return False
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ç–∫–µ–π
                self.hotkeys[hotkey_str.lower()] = callback
                print(f"HOTKEY: ‚úÖ Win32 —Ö–æ—Ç–∫–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è hook: {hotkey_str}")
                return True
                    
            except Exception as e:
                print(f"HOTKEY: ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–æ—Ç–∫–µ—è: {e}")
                return False
        
        def start_listening(self):
            """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ö–æ—Ç–∫–µ–µ–≤ —á–µ—Ä–µ–∑ SetWindowsHookEx"""
            if self.running:
                return
                
            self.running = True
            print("HOTKEY: üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Win32 keyboard hook...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è hook
                def keyboard_hook_proc(nCode, wParam, lParam):
                    try:
                        if nCode >= 0:  # HC_ACTION
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å –∫–ª–∞–≤–∏—à–µ–π
                            key_down = wParam in [WM_KEYDOWN, WM_SYSKEYDOWN]
                            key_up = wParam in [WM_KEYUP, WM_SYSKEYUP]
                            
                            if key_down or key_up:
                                # –ü–æ–ª—É—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–ª–∞–≤–∏—à–∏
                                vk_code = ctypes.cast(lParam, ctypes.POINTER(ctypes.c_ulong)).contents.value & 0xFF
                                
                                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
                                if vk_code == VK_CONTROL:
                                    if key_down:
                                        self.active_modifiers.add('ctrl')
                                    elif key_up:
                                        self.active_modifiers.discard('ctrl')
                                elif vk_code == VK_SHIFT:
                                    if key_down:
                                        self.active_modifiers.add('shift')
                                    elif key_up:
                                        self.active_modifiers.discard('shift')
                                elif vk_code == VK_MENU:  # Alt
                                    if key_down:
                                        self.active_modifiers.add('alt')
                                    elif key_up:
                                        self.active_modifiers.discard('alt')
                                elif vk_code in [VK_LWIN, VK_RWIN]:
                                    if key_down:
                                        self.active_modifiers.add('win')
                                    elif key_up:
                                        self.active_modifiers.discard('win')
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                                if key_down:
                                    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ VK_CODES
                                    key_char = None
                                    for char, code in VK_CODES.items():
                                        if isinstance(code, int) and code == vk_code:
                                            key_char = char
                                            break
                                    
                                    if key_char:
                                        self.active_key = key_char
                                        print(f"HOTKEY: üéØ –ù–∞–∂–∞—Ç–∞ {key_char}, –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: {self.active_modifiers}")
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ö–æ—Ç–∫–µ—è–º–∏
                                        self._check_hotkey_match()
                                
                                elif key_up and self.active_key:
                                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏—à—É –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏
                                    if vk_code == VK_CODES.get(self.active_key, 0):
                                        self.active_key = None
                        
                        # –í–ê–ñ–ù–û: –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π hook
                        return ctypes.windll.user32.CallNextHookExW(self.hook, nCode, wParam, lParam)
                        
                    except Exception as e:
                        print(f"HOTKEY: ‚ùå –û—à–∏–±–∫–∞ –≤ keyboard_hook_proc: {e}")
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
                        return ctypes.windll.user32.CallNextHookExW(self.hook, nCode, wParam, lParam)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ callback (–≤–∞–∂–Ω–æ!)
                self.hook_proc = self.HOOKPROC(keyboard_hook_proc)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hook
                self.hook = ctypes.windll.user32.SetWindowsHookExW(
                    WH_KEYBOARD_LL,
                    self.hook_proc,
                    ctypes.windll.kernel32.GetModuleHandleW(None),
                    0
                )
                
                if self.hook:
                    print(f"HOTKEY: ‚úÖ Keyboard hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.hook}")
                else:
                    error = ctypes.windll.kernel32.GetLastError()
                    print(f"HOTKEY: ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ hook: {error}")
                    return False
                
                return True
                
            except Exception as e:
                print(f"HOTKEY: ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ start_listening: {e}")
                return False
        
        def _check_hotkey_match(self):
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ö–æ—Ç–∫–µ—è–º–∏"""
            if not self.active_key:
                return
            
            for hotkey_str, callback in self.hotkeys.items():
                parts = [p.strip().lower() for p in hotkey_str.split('+')]
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏—à—É
                required_modifiers = set()
                required_key = None
                
                for part in parts:
                    if part in ['ctrl', 'control']:
                        required_modifiers.add('ctrl')
                    elif part == 'shift':
                        required_modifiers.add('shift')
                    elif part == 'alt':
                        required_modifiers.add('alt')
                    elif part == 'win':
                        required_modifiers.add('win')
                    else:
                        required_key = part
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if (required_key == self.active_key and 
                    required_modifiers == self.active_modifiers):
                    print(f"HOTKEY: ‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï! –•–æ—Ç–∫–µ–π '{hotkey_str}' —Å—Ä–∞–±–æ—Ç–∞–ª")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º callback –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    import threading
                    def safe_callback():
                        try:
                            callback()
                        except Exception as e:
                            print(f"HOTKEY: ‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
                    threading.Thread(target=safe_callback, daemon=True).start()
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
                    self.active_key = None
                    return
        
        def stop_listening(self):
            """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç keyboard hook"""
            self.running = False
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º keyboard hook
            if self.hook:
                try:
                    result = ctypes.windll.user32.UnhookWindowsHookExW(self.hook)
                    if result:
                        print("HOTKEY: üßπ Keyboard hook –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
                    else:
                        error = ctypes.windll.kernel32.GetLastError()
                        print(f"HOTKEY: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è hook: {error}")
                except Exception as e:
                    print(f"HOTKEY: ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ hook: {e}")
                finally:
                    self.hook = None
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.hotkeys.clear()
            self.active_modifiers.clear()
            self.active_key = None
            
            print("HOTKEY: üõë Win32 keyboard hook –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö–æ—Ç–∫–µ—è–º–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å .exe)
class HotkeyListener:
    def __init__(self):
        print("DEBUG: HotkeyListener —Å–æ–∑–¥–∞–Ω")
        self.active_keys = []
        self.hotkey_callbacks = {}
        self.valid_keys = []
        self.running = False
        self.listener = None
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Win32 API > pynput > keyboard  
        if USE_WIN32:
            self.win32_listener = Win32HotkeyListener()
            self.method = "win32"
            print("HOTKEY: üéØ –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Win32 API")
        else:
            self.win32_listener = None
            self.method = "fallback"
            print("HOTKEY: üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥—ã")

    def add_hotkey(self, hotkey, callback_func):
        print(f"DEBUG: add_hotkey({hotkey})")
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ö–æ—Ç–∫–µ–π"""
        print(f"HOTKEY: –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç–∫–µ–π '{hotkey}' ({self.method})")
        print(f"HOTKEY: –¢–µ–∫—É—â–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–æ—Ç–∫–µ–∏ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {list(self.hotkey_callbacks.keys())}")
        
        # –û–ß–ò–©–ê–ï–ú –í–°–ï —Å—Ç–∞—Ä—ã–µ —Ö–æ—Ç–∫–µ–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
        if self.hotkey_callbacks:
            print(f"HOTKEY: üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ö–æ—Ç–∫–µ–∏: {list(self.hotkey_callbacks.keys())}")
            # –î–ª—è Win32 –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ–≤–∞—Ä—å (hook –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å)
            if self.method == "win32" and self.win32_listener:
                self.win32_listener.hotkeys.clear()
            self.hotkey_callbacks.clear()
            self.valid_keys.clear()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–æ—Ç–∫–µ–π
        if self.method == "win32" and self.win32_listener:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Win32 API
            success = self.win32_listener.register_hotkey(hotkey, callback_func)
            if success:
                self.hotkey_callbacks[hotkey] = callback_func
                print(f"HOTKEY: ‚úÖ Win32 —Ö–æ—Ç–∫–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: '{hotkey}'")
            else:
                print(f"HOTKEY: ‚ùå Win32 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback")
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback –º–µ—Ç–æ–¥—ã
                self.method = "fallback"
                self.hotkey_callbacks[hotkey] = callback_func
        else:
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
            self.hotkey_callbacks[hotkey] = callback_func
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–ª–∞–≤–∏—à–∏ –∏–∑ —Ö–æ—Ç–∫–µ—è –≤ —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö
        for key in hotkey.split('+'):
            if key not in self.valid_keys:
                self.valid_keys.append(key)
        print(f"HOTKEY: –í–∞–ª–∏–¥–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏: {self.valid_keys}")
        print(f"HOTKEY: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–æ—Ç–∫–µ–∏ –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {list(self.hotkey_callbacks.keys())}")

    def start_listening(self):
        print("DEBUG: start_listening")
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à"""
        if self.running:
            return
        self.running = True
        
        if self.method == "win32" and self.win32_listener:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Win32 API
            print("HOTKEY: üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Win32 listener...")
            success = self.win32_listener.start_listening()
            if success:
                print("HOTKEY: ‚úÖ Win32 listener –∑–∞–ø—É—â–µ–Ω")
            else:
                print("HOTKEY: ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Win32 listener, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback")
                self.method = "fallback"
                print("HOTKEY: üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º fallback –º–µ—Ç–æ–¥—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ Win32...")
                self._start_fallback_methods()
        elif self.method == "fallback":
            # –ó–∞–ø—É—Å–∫–∞–µ–º fallback –º–µ—Ç–æ–¥—ã
            print("HOTKEY: üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º fallback –º–µ—Ç–æ–¥—ã...")
            self._start_fallback_methods()
        else:
            # Fallback –∫ —Å—Ç–∞—Ä—ã–º –º–µ—Ç–æ–¥–∞–º
            if USE_PYNPUT:
                print("HOTKEY: –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å pynput listener...")
                try:
                    self._start_pynput_listener()
                    print("HOTKEY: pynput listener –∑–∞–ø—É—â–µ–Ω")
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ listener —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    import threading
                    def test_listener():
                        import time
                        time.sleep(3)
                        if not hasattr(self, '_pynput_test_received'):
                            print("HOTKEY: ‚ö†Ô∏è pynput –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ keyboard")
                            self._fallback_to_keyboard()
                    threading.Thread(target=test_listener, daemon=True).start()
                except Exception as e:
                    print(f"HOTKEY: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ pynput: {e}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ keyboard")
                    self._start_keyboard_listener()
            else:
                self._start_keyboard_listener()
        
        print("HOTKEY: Listener –∑–∞–ø—É—â–µ–Ω")

    def stop_listening(self):
        self.running = False
        if self.method == "win32" and self.win32_listener:
            self.win32_listener.stop_listening()
        else:
            if self.listener:
                # –ï—Å–ª–∏ —ç—Ç–æ pynput Listener, —É –Ω–µ–≥–æ –µ—Å—Ç—å stop()
                if USE_PYNPUT and hasattr(self.listener, 'stop'):
                    self.listener.stop()
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ—Ç–æ–∫, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É
                self.listener = None
        print("HOTKEY: Listener –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _start_pynput_listener(self):
        """–ó–∞–ø—É—Å–∫ —Å pynput"""
        def on_press(key):
            try:
                # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ pynput –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è
                self._pynput_test_received = True
                
                key_name = self._get_key_name(key).lower()
                print(f"HOTKEY: –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ '{key_name}' (pynput)")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏—à—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –µ—Å–ª–∏ –µ—ë —Ç–∞–º –Ω–µ—Ç
                if key_name not in self.active_keys:
                    self.active_keys.append(key_name)
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã (–Ω–∞ —Å–ª—É—á–∞–π –∑–∞–ª–∏–ø–∞–Ω–∏—è)
                def auto_clear():
                    import time
                    time.sleep(2)
                    if len(self.active_keys) > 0:
                        print(f"HOTKEY: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏—à: {self.active_keys}")
                        self.active_keys.clear()
                
                threading.Thread(target=auto_clear, daemon=True).start()
                
                print(f"HOTKEY: –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏: {self.active_keys}")
                print(f"HOTKEY: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–æ—Ç–∫–µ–∏: {list(self.hotkey_callbacks.keys())}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–æ—Ç–∫–µ–π
                for registered_hotkey, callback in self.hotkey_callbacks.items():
                    print(f"HOTKEY: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Ç–∫–µ–π '{registered_hotkey}'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
                    if self._matches_active_keys(registered_hotkey):
                        print(f"HOTKEY: ‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï! –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è '{registered_hotkey}'")
                        # –í—ã–ø–æ–ª–Ω—è–µ–º callback –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
                        import threading
                        def safe_callback():
                            try:
                                callback()
                            except Exception as e:
                                print(f"HOTKEY: –û—à–∏–±–∫–∞ –≤ callback: {e}")
                        threading.Thread(target=safe_callback, daemon=True).start()
                        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                        old_keys = self.active_keys.copy()
                        self.active_keys.clear()
                        print(f"HOTKEY: üßπ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {old_keys} -> {self.active_keys}")
                        break
                
                print(f"HOTKEY: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏—à: {self.active_keys}")
                        
            except Exception as e:
                print(f"HOTKEY: –û—à–∏–±–∫–∞ –≤ on_press: {e}")

        def on_release(key):
            try:
                key_name = self._get_key_name(key).lower()
                if key_name in self.active_keys:
                    self.active_keys.remove(key_name)
                    print(f"HOTKEY: –û—Ç–ø—É—â–µ–Ω–∞ –∫–ª–∞–≤–∏—à–∞ '{key_name}', –∞–∫—Ç–∏–≤–Ω—ã–µ: {self.active_keys}")
                    
            except Exception as e:
                print(f"HOTKEY: –û—à–∏–±–∫–∞ –≤ on_release: {e}")
                
    def _matches_active_keys(self, registered_hotkey):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ö–æ—Ç–∫–µ—é"""
        hotkey_parts = [part.lower() for part in registered_hotkey.split('+')]
        print(f"HOTKEY: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ '{self.active_keys}' —Å —Ö–æ—Ç–∫–µ–µ–º '{hotkey_parts}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ —Ö–æ—Ç–∫–µ—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏—à–∞—Ö
        for part in hotkey_parts:
            found = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if part in self.active_keys:
                found = True
                print(f"HOTKEY: –ù–∞–π–¥–µ–Ω–∞ —á–∞—Å—Ç—å '{part}' –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏—à–∞—Ö")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
                russian_mapping = {
                    '–π': ['–π', '‚óÑ'],  # –π –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∫ ‚óÑ
                    '—Ü': ['—Ü'],
                    '—É': ['—É'], 
                    '–∫': ['–∫'],
                    '–µ': ['–µ'],
                    '–Ω': ['–Ω'],
                    '–≥': ['–≥'],
                    '—à': ['—à'],
                    '—â': ['—â'],
                    '–∑': ['–∑'],
                    '—Ö': ['—Ö'],
                    '—ä': ['—ä'],
                    '—Ä': ['—Ä'],
                    '–æ': ['–æ'],
                    '–ª': ['–ª'],
                    '–¥': ['–¥'],
                    '–∂': ['–∂'],
                    '—ç': ['—ç'],
                    '—è': ['—è'],
                    '—á': ['—á'],
                    '—Å': ['—Å'],
                    '–º': ['–º'],
                    '–∏': ['–∏'],
                    '—Ç': ['—Ç'],
                    '—å': ['—å'],
                    '–±': ['–±'],
                    '—é': ['—é']
                }
                
                if part in russian_mapping:
                    for variant in russian_mapping[part]:
                        if variant in self.active_keys:
                            found = True
                            print(f"HOTKEY: –ù–∞–π–¥–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç '{variant}' –¥–ª—è '{part}' –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏—à–∞—Ö")
                            break
            
            if not found:
                print(f"HOTKEY: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —á–∞—Å—Ç—å '{part}' –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏—à–∞—Ö")
                return False
        
        print(f"HOTKEY: ‚úÖ –í—Å–µ —á–∞—Å—Ç–∏ —Ö–æ—Ç–∫–µ—è –Ω–∞–π–¥–µ–Ω—ã!")
        return True
    
    def _fallback_to_keyboard(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ keyboard –º–µ—Ç–æ–¥"""
        print("HOTKEY: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pynput –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ keyboard")
        try:
            if self.listener and hasattr(self.listener, 'stop'):
                self.listener.stop()
                self.listener = None
        except Exception as e:
            print(f"HOTKEY: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ pynput: {e}")
        self._start_keyboard_listener()

    def _get_key_name(self, key):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∫–ª–∞–≤–∏—à–∏ –¥–ª—è pynput"""
        try:
            if hasattr(key, 'char') and key.char:
                return key.char
            elif hasattr(key, 'name'):
                key_name = key.name
                # –ú–∞–ø–ø–∏–Ω–≥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                key_mapping = {
                    'ctrl_l': 'ctrl',
                    'ctrl_r': 'ctrl', 
                    'shift': 'shift',
                    'shift_l': 'shift',
                    'shift_r': 'shift',
                    'alt_l': 'alt',
                    'alt_r': 'alt',
                    'cmd': 'cmd',
                    'cmd_l': 'cmd',
                    'cmd_r': 'cmd'
                }
                return key_mapping.get(key_name, key_name)
            else:
                return str(key).replace('Key.', '')
        except:
            return str(key)

    def _start_keyboard_listener(self):
        print("DEBUG: _start_keyboard_listener –≤—ã–∑–≤–∞–Ω")
        """–ó–∞–ø—É—Å–∫ —Å keyboard (fallback –º–µ—Ç–æ–¥)"""
        def listen_loop():
            print("DEBUG: listen_loop —Å—Ç–∞—Ä—Ç—É–µ—Ç")
            while self.running:
                try:
                    event = keyboard.read_event()
                    if event.event_type == keyboard.KEY_DOWN:
                        key_name = event.name.lower()
                        print(f"HOTKEY: –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ '{key_name}' (keyboard)")
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏—à—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –µ—Å–ª–∏ –µ—ë —Ç–∞–º –Ω–µ—Ç
                        if key_name not in self.active_keys:
                            self.active_keys.append(key_name)
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã (–Ω–∞ —Å–ª—É—á–∞–π –∑–∞–ª–∏–ø–∞–Ω–∏—è)
                        def auto_clear():
                            import time
                            time.sleep(2)
                            if len(self.active_keys) > 0:
                                print(f"HOTKEY: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏—à: {self.active_keys}")
                                self.active_keys.clear()
                        threading.Thread(target=auto_clear, daemon=True).start()
                        print(f"HOTKEY: –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏: {self.active_keys}")
                        print(f"HOTKEY: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–æ—Ç–∫–µ–∏: {list(self.hotkey_callbacks.keys())}")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–æ—Ç–∫–µ–π
                        for registered_hotkey, callback in self.hotkey_callbacks.items():
                            print(f"HOTKEY: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Ç–∫–µ–π '{registered_hotkey}'")
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
                            if self._matches_active_keys(registered_hotkey):
                                print(f"HOTKEY: ‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï! –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è '{registered_hotkey}'")
                                # –í—ã–ø–æ–ª–Ω—è–µ–º callback –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
                                def safe_callback():
                                    try:
                                        callback()
                                    except Exception as e:
                                        print(f"HOTKEY: –û—à–∏–±–∫–∞ –≤ callback: {e}")
                                threading.Thread(target=safe_callback, daemon=True).start()
                                # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                                old_keys = self.active_keys.copy()
                                self.active_keys.clear()
                                print(f"HOTKEY: üßπ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {old_keys} -> {self.active_keys}")
                                break
                        print(f"HOTKEY: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏—à: {self.active_keys}")
                    elif event.event_type == keyboard.KEY_UP:
                        key_name = event.name.lower()
                        if key_name in self.active_keys:
                            self.active_keys.remove(key_name)
                            print(f"HOTKEY: –û—Ç–ø—É—â–µ–Ω–∞ –∫–ª–∞–≤–∏—à–∞ '{key_name}', –∞–∫—Ç–∏–≤–Ω—ã–µ: {self.active_keys}")
                except Exception as e:
                    print(f"HOTKEY: –û—à–∏–±–∫–∞ –≤ listen_loop: {e}")
                    break
        self.listener = threading.Thread(target=listen_loop, daemon=True)
        self.listener.start()
        print("HOTKEY: keyboard listener –∑–∞–ø—É—â–µ–Ω")

    def _start_fallback_methods(self):
        # –ü—Ä–æ–±—É–µ–º pynput, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if USE_PYNPUT:
            print("HOTKEY: –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å pynput listener (fallback)...")
            try:
                self._start_pynput_listener()
                print("HOTKEY: pynput listener –∑–∞–ø—É—â–µ–Ω (fallback)")
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ listener —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                import threading
                def test_listener():
                    import time
                    time.sleep(3)
                    if not hasattr(self, '_pynput_test_received'):
                        print("HOTKEY: ‚ö†Ô∏è pynput –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ keyboard (fallback)")
                        self._fallback_to_keyboard()
                threading.Thread(target=test_listener, daemon=True).start()
            except Exception as e:
                print(f"HOTKEY: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ pynput (fallback): {e}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ keyboard")
                self._start_keyboard_listener()
        else:
            print("HOTKEY: pynput –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º keyboard listener (fallback)")
            self._start_keyboard_listener()

# –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
SETTINGS_FILE = None
LOGO_FILE = None
HTML_TIMER_SETTINGS_FILE = None
LOGS_DIR = None
WORK_DIR = None
ENCRYPTED_CONFIG_FILE = None
encrypted_config = None

class EncryptedConfig:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, config_file_path):
        self.config_file_path = config_file_path
        self.key = None
        self.fernet = None
        self._initialize_encryption()
    
    def _initialize_encryption(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
            if os.path.exists(self.config_file_path):
                with open(self.config_file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if 'encryption_key' in data:
                        key_hex = data['encryption_key']
                        self.key = bytes.fromhex(key_hex)
                        self.fernet = Fernet(base64.urlsafe_b64encode(self.key))
                        return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
            self.key = secrets.token_bytes(32)
            self.fernet = Fernet(base64.urlsafe_b64encode(self.key))
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            # Fallback - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
            self.key = secrets.token_bytes(32)
            self.fernet = Fernet(base64.urlsafe_b64encode(self.key))
    
    def encrypt_data(self, data):
        """–®–∏—Ñ—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            json_data = json.dumps(data, ensure_ascii=False)
            encrypted = self.fernet.encrypt(json_data.encode('utf-8'))
            return base64.b64encode(encrypted).decode('utf-8')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None
    
    def decrypt_data(self, encrypted_data):
        """–î–µ—à–∏—Ñ—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            encrypted_bytes = base64.b64decode(encrypted_data)
            decrypted = self.fernet.decrypt(encrypted_bytes)
            return json.loads(decrypted.decode('utf-8'))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None
    
    def save_config(self, hotkey_settings=None, html_settings=None, client_secret=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            config_data = {
                'encryption_key': self.key.hex(),
                'encrypted_data': {}
            }
            
            if hotkey_settings is not None:
                encrypted_hotkey = self.encrypt_data(hotkey_settings)
                if encrypted_hotkey:
                    config_data['encrypted_data']['hotkey_settings'] = encrypted_hotkey
            
            if html_settings is not None:
                encrypted_html = self.encrypt_data(html_settings)
                if encrypted_html:
                    config_data['encrypted_data']['html_timer_settings'] = encrypted_html
            
            if client_secret is not None:
                encrypted_client = self.encrypt_data(client_secret)
                if encrypted_client:
                    config_data['encrypted_data']['client_secret'] = encrypted_client
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
            if os.path.exists(self.config_file_path):
                with open(self.config_file_path, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
                    if 'encrypted_data' in existing_data:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                        for key, value in config_data['encrypted_data'].items():
                            existing_data['encrypted_data'][key] = value
                        config_data = existing_data
            
            with open(self.config_file_path, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, ensure_ascii=False, indent=2)
                
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def load_config(self, config_type):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if not os.path.exists(self.config_file_path):
                return None
                
            with open(self.config_file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            if 'encrypted_data' not in data or config_type not in data['encrypted_data']:
                return None
                
            encrypted_data = data['encrypted_data'][config_type]
            return self.decrypt_data(encrypted_data)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_type}: {e}")
            return None
    
    def import_legacy_encrypted_files(self, work_dir):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü—É—Ç–∏ –∫ —Å—Ç–∞—Ä—ã–º —Ñ–∞–π–ª–∞–º
            key_file = os.path.join(work_dir, 'key.enc')
            hotkey_file = os.path.join(work_dir, 'hotkey_settings.enc')
            html_file = os.path.join(work_dir, 'html_timer_settings.enc')
            client_file = os.path.join(work_dir, 'client_secret.enc')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            if not os.path.exists(key_file):
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á
            with open(key_file, 'r', encoding='utf-8') as f:
                key_hex = f.read().strip()
                legacy_key = bytes.fromhex(key_hex)
                legacy_fernet = Fernet(base64.urlsafe_b64encode(legacy_key))
            
            imported_data = {}
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            for file_path, config_name in [
                (hotkey_file, 'hotkey_settings'),
                (html_file, 'html_timer_settings'), 
                (client_file, 'client_secret')
            ]:
                if os.path.exists(file_path):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            encrypted_data = f.read().strip()
                        
                        # –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                        encrypted_bytes = base64.b64decode(encrypted_data)
                        decrypted = legacy_fernet.decrypt(encrypted_bytes)
                        data = json.loads(decrypted.decode('utf-8'))
                        imported_data[config_name] = data
                        
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {config_name}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if imported_data:
                self.save_config(
                    imported_data.get('hotkey_settings'),
                    imported_data.get('html_timer_settings'),
                    imported_data.get('client_secret')
                )
                print(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(imported_data)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤")
                return True
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        
        return False

class UserAgreementDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ')
        self.setFixedSize(700, 600)
        self.setModal(True)
        
        self.setStyleSheet('''
            QDialog {
                background-color: #181f2a;
                color: #e6e6e6;
            }
            QLabel {
                color: #e6e6e6;
                font-size: 14px;
            }
            QPushButton {
                background-color: #232b3b;
                color: #e6e6e6;
                border: 1px solid #2e3950;
                border-radius: 5px;
                padding: 10px 20px;
                font-size: 13px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2e3950;
            }
            QPushButton#acceptBtn {
                background-color: #28a745;
                border-color: #28a745;
            }
            QPushButton#acceptBtn:hover {
                background-color: #34ce57;
            }
            QPushButton#rejectBtn {
                background-color: #dc3545;
                border-color: #dc3545;
            }
            QPushButton#rejectBtn:hover {
                background-color: #e74c3c;
            }
            QTextEdit {
                background-color: #232b3b;
                color: #e6e6e6;
                border: 1px solid #2e3950;
                border-radius: 5px;
                padding: 10px;
                font-size: 12px;
                line-height: 1.4;
            }
        ''')
        
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel('–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï')
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet('font-size: 18px; font-weight: bold; margin: 10px; color: #7b5cff;')
        layout.addWidget(title)
        
        subtitle = QLabel('–¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "GameLeague Timer"')
        subtitle.setAlignment(Qt.AlignCenter)
        subtitle.setStyleSheet('font-size: 14px; margin-bottom: 15px; color: #cccccc;')
        layout.addWidget(subtitle)
        
        # –¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–º –ø–æ–ª–µ
        agreement_text = self.get_agreement_text()
        
        text_edit = QTextEdit()
        text_edit.setPlainText(agreement_text)
        text_edit.setReadOnly(True)
        layout.addWidget(text_edit)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notice = QLabel('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–∑–Ω–∞—á–∞—é—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ —É—Å–ª–æ–≤–∏–π —Å–æ–≥–ª–∞—à–µ–Ω–∏—è')
        notice.setAlignment(Qt.AlignCenter)
        notice.setStyleSheet('color: #ffc107; font-size: 12px; margin: 10px; font-weight: bold;')
        notice.setWordWrap(True)
        layout.addWidget(notice)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        
        reject_btn = QPushButton('–û—Ç–∫–ª–æ–Ω—è—é')
        reject_btn.setObjectName('rejectBtn')
        reject_btn.clicked.connect(self.reject)
        
        accept_btn = QPushButton('–ü—Ä–∏–Ω–∏–º–∞—é')
        accept_btn.setObjectName('acceptBtn')
        accept_btn.clicked.connect(self.accept)
        accept_btn.setDefault(True)
        
        btn_layout.addWidget(reject_btn)
        btn_layout.addStretch()
        btn_layout.addWidget(accept_btn)
        
        layout.addLayout(btn_layout)
        
    def get_agreement_text(self):
        return '''–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï
–¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "TGL"

–ù–∞—Å—Ç–æ—è—â–µ–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–¥–∞–ª–µ–µ ‚Äì ¬´–°–æ–≥–ª–∞—à–µ–Ω–∏–µ¬ª) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –æ–±—è–∑—ã–≤–∞—é—â–∏–π –¥–æ–≥–æ–≤–æ—Ä –º–µ–∂–¥—É –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º (–≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´TGL¬ª) –∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∏–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–æ–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–º –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ). –£—Å—Ç–∞–Ω–æ–≤–∫–∞, –∑–∞–ø—É—Å–∫ –∏–ª–∏ –∏–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–∑–Ω–∞—á–∞—é—Ç –±–µ–∑–æ–≥–æ–≤–æ—Ä–æ—á–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è. –í —Å–ª—É—á–∞–µ –Ω–µ—Å–æ–≥–ª–∞—Å–∏—è —Å –ª—é–±—ã–º –∏–∑ –ø–æ–ª–æ–∂–µ–Ω–∏–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

1. –¢–µ—Ä–º–∏–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
 1.1. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äì –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø–æ–¥ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º ¬´Timer App¬ª, –≤–∫–ª—é—á–∞—è –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã.
 1.2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì –¥–µ–µ—Å–ø–æ—Å–æ–±–Ω–æ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –∏–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∑–∞–∫–æ–Ω–Ω—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏—è—Ö.
 1.3. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äì –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
 1.4. –ö–æ–Ω—Ç–µ–Ω—Ç ‚Äì –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç—ã, –≥—Ä–∞—Ñ–∏–∫—É, –∑–≤—É–∫–∏, –≤–∏–¥–µ–æ –∏ –∏–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ —Ä–∞–º–∫–∞—Ö –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 1.5. –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å ‚Äì –ø–µ—Ä—Å–æ–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏).

2. –ü—Ä–µ–¥–º–µ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
 2.1. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é, –Ω–µ–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é, –Ω–µ–ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—É—é, –æ—Ç–∑—ã–≤–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –∏ —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.
 2.2. –í—Å–µ –ø—Ä–∞–≤–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º, –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –º–∞—Ä–∫–∞–º–∏, –æ—Å—Ç–∞—é—Ç—Å—è –∑–∞ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.

3. –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 3.1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è:
    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –ª–∏—á–Ω—ã—Ö, –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö.
    ‚Ä¢ –ù–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å, –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    ‚Ä¢ –ù–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å —Ä–µ–≤–µ—Ä—Å-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥, –¥–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—é –∏–ª–∏ –∏–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    ‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ü–µ–ª—è—Ö, –Ω–∞—Ä—É—à–∞—é—â–∏—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏–ª–∏ –ø—Ä–∞–≤–∞ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü.

 3.2. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤–ø—Ä–∞–≤–µ:
    ‚Ä¢ –í –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑–º–µ–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π.
    ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –°–æ–≥–ª–∞—à–µ–Ω–∏—è.
    ‚Ä¢ –°–æ–±–∏—Ä–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

4. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 4.1. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª (AS IS). –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω—É—é —Ä–∞–±–æ—Ç—É –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ–≥–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ –≤—Å–µ–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫.
 4.2. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
    ‚Ä¢ –ó–∞ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ, —Å–ª—É—á–∞–π–Ω—ã–µ –∏–ª–∏ consequential damages, –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    ‚Ä¢ –ó–∞ –¥–µ–π—Å—Ç–≤–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–≤–ª–µ–∫—à–∏–µ —É—â–µ—Ä–± —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.
    ‚Ä¢ –ó–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤, –¥–µ–π—Å—Ç–≤–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏–ª–∏ –∏–Ω—ã—Ö —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤.
 4.3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–æ–∫—É–ø–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è —Å—É–º–º–æ–π, —É–ø–ª–∞—á–µ–Ω–Ω–æ–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 (—à–µ—Å—Ç–∏) –º–µ—Å—è—Ü–µ–≤.

5. –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
 5.1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, —è–≤–ª—è—é—â–µ–π—Å—è –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.
 5.2. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:
    ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞).
    ‚Ä¢ –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º (–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏).
5.3. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç industry-standard –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö, –æ–¥–Ω–∞–∫–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.

6. –ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
 6.1. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ (–ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏ —Ç.–¥.).
 6.2. –£—Å–ª–æ–≤–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:
    ‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏. 
    ‚Ä¢ –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
6.3. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞—è—Ö, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è.

7. –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
 7.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º [—Å—Ç—Ä–∞–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞]. –í—Å–µ —Å–ø–æ—Ä—ã –ø–æ–¥–ª–µ–∂–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—É–¥–µ–±–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è—Ö.
 7.2. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –°–æ–≥–ª–∞—à–µ–Ω–∏–∏ –ø—É—Ç–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ.
 7.3. –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π –°–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–µ –≤–ª–µ—á–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.'''

class WorkDirectoryDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle('–í—ã–±–æ—Ä —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏')
        self.setFixedSize(600, 450)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.setModal(True)
        self.selected_dir = None
        
        self.setStyleSheet('''
            QDialog {
                background-color: #181f2a;
                color: #e6e6e6;
            }
            QLabel {
                color: #e6e6e6;
                font-size: 12px;
            }
            QPushButton {
                background-color: #232b3b;
                color: #e6e6e6;
                border: 1px solid #2e3950;
                border-radius: 5px;
                padding: 8px 15px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #2e3950;
            }
            QLineEdit {
                background-color: #232b3b;
                color: #e6e6e6;
                border: 1px solid #2e3950;
                border-radius: 5px;
                padding: 8px;
                font-size: 12px;
            }
        ''')
        
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GameLeague Timer!')
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet('font-size: 16px; font-weight: bold; margin: 10px;')
        layout.addWidget(title)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc = QLabel('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É, –≥–¥–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏ —Ç–∞–π–º–µ—Ä–∞.\n'
                     '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–∞–π–º–µ—Ä–∞.\n\n'
                     '–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã:\n'
                     '‚Ä¢ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ \n'
                     '‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ \n'
                     '‚Ä¢ –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ –∏–≥—Ä \n'
                     '‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã —Ä–µ—Å—É—Ä—Å–æ–≤\n\n'
                     '‚Ä¢ –§–∞–π–ª—ã GDI —ç—Ñ–µ–∫—Ç–æ—Ä –∏ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤')
        desc.setAlignment(Qt.AlignLeft)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å Center –Ω–∞ Left –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        desc.setWordWrap(True)
        desc.setStyleSheet('color: #ffffff; font-size: 13px; margin: 15px; line-height: 1.4;')  # –£–ª—É—á—à–µ–Ω—ã —Å—Ç–∏–ª–∏
        layout.addWidget(desc)
        
        layout.addSpacing(15)
        
        # –í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dir_layout = QHBoxLayout()
        self.dir_input = QLineEdit()
        self.dir_input.setPlaceholderText('–ü—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...')
        self.dir_input.setReadOnly(True)
        
        browse_btn = QPushButton('–û–±–∑–æ—Ä...')
        browse_btn.clicked.connect(self.browse_directory)
        
        dir_layout.addWidget(self.dir_input)
        dir_layout.addWidget(browse_btn)
        layout.addLayout(dir_layout)
        
        layout.addSpacing(10)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
        create_btn = QPushButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–∞–π–º–µ—Ä–∞')
        create_btn.clicked.connect(self.create_new_directory)
        create_btn.setStyleSheet('QPushButton { padding: 8px; font-size: 12px; }')
        layout.addWidget(create_btn)
        
        layout.addSpacing(25)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        
        ok_btn = QPushButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        ok_btn.clicked.connect(self.accept_directory)
        ok_btn.setStyleSheet('QPushButton { padding: 10px 20px; font-size: 13px; font-weight: bold; }')
        ok_btn.setDefault(True)
        
        cancel_btn = QPushButton('–û—Ç–º–µ–Ω–∞')
        cancel_btn.clicked.connect(self.reject)
        cancel_btn.setStyleSheet('QPushButton { padding: 10px 20px; font-size: 13px; }')
        
        btn_layout.addWidget(cancel_btn)
        btn_layout.addWidget(ok_btn)
        layout.addLayout(btn_layout)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_dir = os.path.join(os.getcwd(), 'TimerData')
        self.dir_input.setText(default_dir)
        self.selected_dir = default_dir
        
    def browse_directory(self):
        dir_path = QFileDialog.getExistingDirectory(self, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ç–∞–π–º–µ—Ä–∞')
        if dir_path:
            self.dir_input.setText(dir_path)
            self.selected_dir = dir_path
            
    def create_new_directory(self):
        dir_path = QFileDialog.getExistingDirectory(self, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É, –≥–¥–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é')
        if dir_path:
            new_dir = os.path.join(dir_path, 'GameLeagueTimer')
            try:
                os.makedirs(new_dir, exist_ok=True)
                self.dir_input.setText(new_dir)
                self.selected_dir = new_dir
                QMessageBox.information(self, '–£—Å–ø–µ—à–Ω–æ', f'–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {new_dir}')
            except Exception as e:
                QMessageBox.warning(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {str(e)}')
                
    def accept_directory(self):
        if not self.selected_dir:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é')
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
        try:
            os.makedirs(self.selected_dir, exist_ok=True)
            self.accept()
        except Exception as e:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}')

def init_work_directory():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º"""
    global WORK_DIR, SETTINGS_FILE, LOGO_FILE, HTML_TIMER_SETTINGS_FILE, LOGS_DIR
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    # –î–ª—è exe —Ñ–∞–π–ª–∞ –∏—â–µ–º —Ä—è–¥–æ–º —Å exe, –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ - –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
    if getattr(sys, 'frozen', False):
        exe_dir = os.path.dirname(sys.executable)
        temp_settings_file = os.path.join(exe_dir, 'work_dir.json')
    else:
        temp_settings_file = os.path.join(os.getcwd(), 'work_dir.json')
    
    if os.path.exists(temp_settings_file):
        try:
            with open(temp_settings_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                WORK_DIR = data.get('work_dir')
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if WORK_DIR and os.path.exists(WORK_DIR):
                _setup_paths()
                return True
        except:
            pass
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
    app = QApplication.instance()
    if app is None:
        app = QApplication(sys.argv)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
    agreement_dialog = UserAgreementDialog()
    if agreement_dialog.exec_() != QDialog.Accepted:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ - –≤—ã—Ö–æ–¥–∏–º
        return False
    
    # –ï—Å–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    dialog = WorkDirectoryDialog()
    if dialog.exec_() == QDialog.Accepted:
        WORK_DIR = dialog.selected_dir
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ –≥–¥–µ –∏—Å–∫–∞–ª–∏
        try:
            with open(temp_settings_file, 'w', encoding='utf-8') as f:
                json.dump({'work_dir': WORK_DIR}, f, ensure_ascii=False, indent=2)
        except Exception as e:
            QMessageBox.warning(None, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}')
        
        _setup_paths()
        return True
    else:
        return False

def _setup_paths():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –ø—É—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    global SETTINGS_FILE, LOGO_FILE, HTML_TIMER_SETTINGS_FILE, LOGS_DIR, ENCRYPTED_CONFIG_FILE, encrypted_config
    
    SETTINGS_FILE = os.path.join(WORK_DIR, 'hotkey_settings.json')
    LOGO_FILE = os.path.join(WORK_DIR, 'logo.png')
    HTML_TIMER_SETTINGS_FILE = os.path.join(WORK_DIR, 'html_timer_settings.json')
    LOGS_DIR = os.path.join(WORK_DIR, 'log')
    ENCRYPTED_CONFIG_FILE = os.path.join(WORK_DIR, 'timer_config.enc')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    encrypted_config = EncryptedConfig(ENCRYPTED_CONFIG_FILE)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(LOGS_DIR, exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º logo.png –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    current_dir_logo = os.path.join(os.path.dirname(__file__), 'logo.png')
    if os.path.exists(current_dir_logo) and not os.path.exists(LOGO_FILE):
        try:
            shutil.copy2(current_dir_logo, LOGO_FILE)
        except:
            pass
    
    # –ï—Å–ª–∏ –Ω–µ—Ç logo.png –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫—É
    if not os.path.exists(current_dir_logo):
        try:
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PNG —Ñ–∞–π–ª (1x1 –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø–∏–∫—Å–µ–ª—å)
            png_data = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\rIDATx\x9cc\xf8\x0f\x00\x00\x01\x00\x01\x00\x18\xdd\x8d\xb4\x00\x00\x00\x00IEND\xaeB`\x82'
            with open(current_dir_logo, 'wb') as f:
                f.write(png_data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è logo.png: {e}")
    
    # –°–æ–∑–¥–∞–µ–º logo2.png –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    current_dir_logo2 = os.path.join(os.path.dirname(__file__), 'logo2.png')
    if not os.path.exists(current_dir_logo2):
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º logo.png –∫–∞–∫ logo2.png
            if os.path.exists(current_dir_logo):
                shutil.copy2(current_dir_logo, current_dir_logo2)
            else:
                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PNG —Ñ–∞–π–ª
                png_data = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\rIDATx\x9cc\xf8\x0f\x00\x00\x01\x00\x01\x00\x18\xdd\x8d\xb4\x00\x00\x00\x00IEND\xaeB`\x82'
                with open(current_dir_logo2, 'wb') as f:
                    f.write(png_data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è logo2.png: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É client_secret.json –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ù–ï –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞)
    work_client_secret_file = os.path.join(WORK_DIR, 'client_secret.json')
    if not os.path.exists(work_client_secret_file):
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è client_secret.json (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            client_secret_stub = {
                "installed": {
                    "client_id": "your_client_id.apps.googleusercontent.com",
                    "project_id": "your_project_id",
                    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                    "token_uri": "https://oauth2.googleapis.com/token",
                    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                    "client_secret": "your_client_secret",
                    "redirect_uris": ["urn:ietf:wg:oauth:2.0:oob", "http://localhost"],
                    "_comment": "–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ OAuth —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º timer_config.enc"
                }
            }
            with open(work_client_secret_file, 'w', encoding='utf-8') as f:
                json.dump(client_secret_stub, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è client_secret.json: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        imported = encrypted_config.import_legacy_encrypted_files(WORK_DIR)
        if imported:
            print("–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        hotkey_settings = encrypted_config.load_config('hotkey_settings')
        html_settings = encrypted_config.load_config('html_timer_settings')
        client_secret = encrypted_config.load_config('client_secret')
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if hotkey_settings is None:
            hotkey_settings = {
                'hotkey': None,
                'hotkey_display': None,
                'email': None,
                'ws_port': 8765
            }
        
        if html_settings is None:
            html_settings = {
                'font_family': 'Segoe UI',
                'font_size': 'medium',
                'show_game_name': False,
                'game_name_position': 'top',
                'bg_color': '#181f2a',
                'timer_color': '#ffffff',
                'timer_bg_color': '#232b3b',
                'opacity': 85,
                'border_radius': 36,
                'padding': 40,
                'shadow': True,
                'shadow_size': 32,
                'show_seconds': True,
                'show_hours': True,
                'outline': False,
                'outline_color': '#000000',
                'outline_width': 2
            }
        
        if client_secret is None:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google OAuth –∏–∑ —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
            script_client_secret_file = os.path.join(os.path.dirname(__file__), 'client_secret.json')
            if os.path.exists(script_client_secret_file):
                try:
                    with open(script_client_secret_file, 'r', encoding='utf-8') as f:
                        client_secret = json.load(f)
                    print("–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google OAuth –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ client_secret.json: {e}")
                    client_secret = None
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            if client_secret is None:
                client_secret = {
                    "installed": {
                        "client_id": "your_client_id.apps.googleusercontent.com",
                        "project_id": "timer_project",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "token_uri": "https://oauth2.googleapis.com/token",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "client_secret": "your_client_secret",
                        "redirect_uris": ["urn:ietf:wg:oauth:2.0:oob", "http://localhost"]
                    }
                }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
        encrypted_config.save_config(hotkey_settings, html_settings, client_secret)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        if not os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
                json.dump(hotkey_settings, f, ensure_ascii=False, indent=2)
        
        if not os.path.exists(HTML_TIMER_SETTINGS_FILE):
            with open(HTML_TIMER_SETTINGS_FILE, 'w', encoding='utf-8') as f:
                json.dump(html_settings, f, ensure_ascii=False, indent=2)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        # Fallback - —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        if not os.path.exists(SETTINGS_FILE):
            try:
                default_settings = {
                    'hotkey': None,
                    'hotkey_display': None,
                    'email': None,
                    'ws_port': 8765
                }
                with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
                    json.dump(default_settings, f, ensure_ascii=False, indent=2)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        if not os.path.exists(HTML_TIMER_SETTINGS_FILE):
            try:
                default_html_settings = {
                    'font_family': 'Segoe UI',
                    'font_size': 'medium',
                    'show_game_name': False,
                    'game_name_position': 'top',
                    'bg_color': '#181f2a',
                    'timer_color': '#ffffff',
                    'timer_bg_color': '#232b3b',
                    'opacity': 85,
                    'border_radius': 36,
                    'padding': 40,
                    'shadow': True,
                    'shadow_size': 32,
                    'show_seconds': True,
                    'show_hours': True,
                    'outline': False,
                    'outline_color': '#000000',
                    'outline_width': 2
                }
                with open(HTML_TIMER_SETTINGS_FILE, 'w', encoding='utf-8') as f:
                    json.dump(default_html_settings, f, ensure_ascii=False, indent=2)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ HTML —Ç–∞–π–º–µ—Ä–∞: {e}")

class CustomColorDialog(QDialog):
    def __init__(self, initial_color="#ffffff", parent=None):
        super().__init__(parent)
        self.setWindowTitle('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç')
        self.setFixedSize(380, 320)
        self.setModal(True)
        self.initial_color = initial_color
        self.setStyleSheet('''
            QDialog {
                background-color: #181f2a;
                color: #e6e6e6;
                border-radius: 12px;
            }
            QLabel {
                color: #e6e6e6;
                font-size: 14px;
            }
            QLineEdit {
                background: #232b3b;
                color: #e6e6e6;
                border: 1px solid #2e3950;
                border-radius: 6px;
                padding: 6px 10px;
                font-size: 15px;
            }
            QSlider::groove:horizontal {
                border: 1px solid #2e3950;
                height: 8px;
                background: #232b3b;
                border-radius: 4px;
            }
            QSlider::handle:horizontal {
                background: #7b5cff;
                border: 1px solid #2e3950;
                width: 18px;
                margin: -5px 0;
                border-radius: 9px;
            }
            QPushButton {
                background-color: #232b3b;
                color: #e6e6e6;
                border: 1px solid #2e3950;
                border-radius: 8px;
                padding: 10px 24px;
                font-size: 15px;
                font-weight: bold;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: #2e3950;
            }
            QPushButton#acceptBtn {
                background-color: #28a745;
                border-color: #28a745;
                color: #fff;
            }
            QPushButton#acceptBtn:hover {
                background-color: #34ce57;
            }
            QPushButton#rejectBtn {
                background-color: #dc3545;
                border-color: #dc3545;
                color: #fff;
            }
            QPushButton#rejectBtn:hover {
                background-color: #e74c3c;
            }
        ''')
        self.init_ui()

    def init_ui(self):
        from PyQt5.QtWidgets import QSlider, QLineEdit
        from PyQt5.QtGui import QColor
        layout = QVBoxLayout(self)
        layout.setSpacing(12)
        # Preview
        self.preview = QLabel()
        self.preview.setFixedSize(90, 90)
        self.preview.setStyleSheet(f"background: {self.initial_color}; border: 2px solid #7b5cff; border-radius: 12px;")
        layout.addWidget(self.preview, alignment=Qt.AlignHCenter)
        # HEX
        hex_layout = QHBoxLayout()
        hex_label = QLabel("HEX:")
        hex_label.setFixedWidth(36)
        self.hex_edit = QLineEdit(self.initial_color)
        self.hex_edit.setMaxLength(7)
        hex_layout.addWidget(hex_label)
        hex_layout.addWidget(self.hex_edit)
        layout.addLayout(hex_layout)
        # R, G, B sliders
        self.r_slider = QSlider(Qt.Horizontal)
        self.g_slider = QSlider(Qt.Horizontal)
        self.b_slider = QSlider(Qt.Horizontal)
        for s in (self.r_slider, self.g_slider, self.b_slider):
            s.setRange(0, 255)
            s.setSingleStep(1)
        color = QColor(self.initial_color)
        self.r_slider.setValue(color.red())
        self.g_slider.setValue(color.green())
        self.b_slider.setValue(color.blue())
        for name, slider in zip(["R", "G", "B"], [self.r_slider, self.g_slider, self.b_slider]):
            row = QHBoxLayout()
            label = QLabel(name + ":")
            label.setFixedWidth(18)
            row.addWidget(label)
            row.addWidget(slider)
            value_label = QLabel(str(slider.value()))
            value_label.setFixedWidth(28)
            row.addWidget(value_label)
            slider.valueChanged.connect(lambda val, l=value_label: l.setText(str(val)))
            layout.addLayout(row)
        layout.addSpacing(8)
        # Buttons
        btn_layout = QHBoxLayout()
        btn_layout.addStretch()
        reject_btn = QPushButton('–û—Ç–º–µ–Ω–∞')
        reject_btn.setObjectName('rejectBtn')
        reject_btn.clicked.connect(self.reject)
        accept_btn = QPushButton('–ü—Ä–∏–Ω—è—Ç—å')
        accept_btn.setObjectName('acceptBtn')
        accept_btn.clicked.connect(self.accept)
        accept_btn.setDefault(True)
        btn_layout.addWidget(reject_btn)
        btn_layout.addWidget(accept_btn)
        btn_layout.addStretch()
        layout.addLayout(btn_layout)
        # –°–∏–≥–Ω–∞–ª—ã
        self.r_slider.valueChanged.connect(self.sync_rgb_to_hex)
        self.g_slider.valueChanged.connect(self.sync_rgb_to_hex)
        self.b_slider.valueChanged.connect(self.sync_rgb_to_hex)
        self.hex_edit.textChanged.connect(self.sync_hex_to_rgb)
        self.selected_color = self.initial_color

    def sync_rgb_to_hex(self):
        from PyQt5.QtGui import QColor
        r, g, b = self.r_slider.value(), self.g_slider.value(), self.b_slider.value()
        hex_color = f"#{r:02x}{g:02x}{b:02x}"
        self.hex_edit.setText(hex_color)
        self.preview.setStyleSheet(f"background: {hex_color}; border: 2px solid #7b5cff; border-radius: 12px;")
        self.selected_color = hex_color

    def sync_hex_to_rgb(self):
        from PyQt5.QtGui import QColor
        hex_val = self.hex_edit.text()
        if QColor(hex_val).isValid():
            color = QColor(hex_val)
            self.r_slider.setValue(color.red())
            self.g_slider.setValue(color.green())
            self.b_slider.setValue(color.blue())
            self.preview.setStyleSheet(f"background: {hex_val}; border: 2px solid #7b5cff; border-radius: 12px;")
            self.selected_color = hex_val

    def getColor(self):
        if self.exec_() == QDialog.Accepted:
            return self.selected_color
        return None

class HTMLTimerSettingsDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ HTML —Ç–∞–π–º–µ—Ä–∞')
        self.setFixedSize(450, 600)
        self.setStyleSheet('''
            QDialog {
                background-color: #181f2a;
                color: #e6e6e6;
            }
            QLabel {
                color: #e6e6e6;
                font-size: 14px;
            }
            QPushButton {
                background-color: #232b3b;
                color: #e6e6e6;
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2e3950;
            }
            QPushButton:pressed {
                background-color: #1e2630;
            }
            QComboBox {
                background-color: #232b3b;
                color: #e6e6e6;
                border: 1px solid #2e3950;
                border-radius: 4px;
                padding: 6px;
                min-width: 120px;
            }
            QComboBox::drop-down {
                border: none;
            }
            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 5px solid #e6e6e6;
            }
            QComboBox QAbstractItemView {
                background-color: #232b3b;
                color: #e6e6e6;
                border: 1px solid #2e3950;
                selection-background-color: #7b5cff;
            }
            QSpinBox {
                background-color: #232b3b;
                color: #e6e6e6;
                border: 1px solid #2e3950;
                border-radius: 4px;
                padding: 6px;
                min-width: 80px;
            }
            QSpinBox::up-button, QSpinBox::down-button {
                background-color: #2e3950;
                border: none;
                border-radius: 2px;
            }
            QSpinBox::up-button:hover, QSpinBox::down-button:hover {
                background-color: #7b5cff;
            }
            QCheckBox {
                color: #e6e6e6;
                spacing: 8px;
            }
            QCheckBox::indicator {
                width: 16px;
                height: 16px;
                border: 2px solid #2e3950;
                border-radius: 3px;
                background-color: #232b3b;
            }
            QCheckBox::indicator:checked {
                background-color: #7b5cff;
                border-color: #7b5cff;
            }
            QCheckBox::indicator:checked::after {
                content: "‚úì";
                color: white;
                font-weight: bold;
                font-size: 12px;
            }
        ''')
        self.init_ui()
        self.load_settings()
    
    def init_ui(self):
        layout = QVBoxLayout()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        form_layout = QFormLayout()
        
        # –®—Ä–∏—Ñ—Ç
        self.font_family_combo = QComboBox(self)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
        font_db = QFontDatabase()
        font_families = font_db.families()
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –≤ –Ω–∞—á–∞–ª–æ
        standard_fonts = ['Segoe UI', 'Arial', 'Helvetica', 'Times New Roman', 'Courier New']
        for font in standard_fonts:
            if font in font_families:
                font_families.remove(font)
        all_fonts = standard_fonts + sorted(font_families)
        self.font_family_combo.addItems(all_fonts)
        self.font_family_combo.setCurrentText('Segoe UI')
        form_layout.addRow('–®—Ä–∏—Ñ—Ç:', self.font_family_combo)
        
        # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (—É–±–∏—Ä–∞–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —Ä–∞–∑–º–µ—Ä—ã)
        self.font_size_combo = QComboBox(self)
        self.font_size_combo.addItems(['–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π', '–ú–∞–ª–µ–Ω—å–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–ë–æ–ª—å—à–æ–π'])
        self.font_size_combo.setCurrentText('–°—Ä–µ–¥–Ω–∏–π')
        form_layout.addRow('–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:', self.font_size_combo)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        self.show_game_name_checkbox = QCheckBox('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã', self)
        self.show_game_name_checkbox.setChecked(False)
        form_layout.addRow('', self.show_game_name_checkbox)
        
        # –ü–æ–∑–∏—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã
        self.game_name_position_combo = QComboBox(self)
        self.game_name_position_combo.addItems(['–°–≤–µ—Ä—Ö—É —Ç–∞–π–º–µ—Ä–∞', '–°–Ω–∏–∑—É —Ç–∞–π–º–µ—Ä–∞'])
        self.game_name_position_combo.setCurrentText('–°–≤–µ—Ä—Ö—É —Ç–∞–π–º–µ—Ä–∞')
        form_layout.addRow('–ü–æ–∑–∏—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è:', self.game_name_position_combo)
        
        # –¶–≤–µ—Ç —Ñ–æ–Ω–∞
        self.bg_color_btn = QPushButton('–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç', self)
        self.bg_color_btn.clicked.connect(self.choose_bg_color)
        self.bg_color_preview = QLabel(self)
        self.bg_color_preview.setFixedSize(40, 25)
        self.bg_color_preview.setStyleSheet('background: #181f2a; border: 2px solid #7b5cff; border-radius: 4px;')
        bg_color_layout = QHBoxLayout()
        bg_color_layout.addWidget(self.bg_color_btn)
        bg_color_layout.addWidget(self.bg_color_preview)
        form_layout.addRow('–¶–≤–µ—Ç —Ñ–æ–Ω–∞:', bg_color_layout)
        
        # –¶–≤–µ—Ç —Ç–∞–π–º–µ—Ä–∞
        self.timer_color_btn = QPushButton('–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç', self)
        self.timer_color_btn.clicked.connect(self.choose_timer_color)
        self.timer_color_preview = QLabel(self)
        self.timer_color_preview.setFixedSize(40, 25)
        self.timer_color_preview.setStyleSheet('background: #fff; border: 2px solid #7b5cff; border-radius: 4px;')
        timer_color_layout = QHBoxLayout()
        timer_color_layout.addWidget(self.timer_color_btn)
        timer_color_layout.addWidget(self.timer_color_preview)
        form_layout.addRow('–¶–≤–µ—Ç —Ç–∞–π–º–µ—Ä–∞:', timer_color_layout)
        
        # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞
        self.timer_bg_color_btn = QPushButton('–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç', self)
        self.timer_bg_color_btn.clicked.connect(self.choose_timer_bg_color)
        self.timer_bg_color_preview = QLabel(self)
        self.timer_bg_color_preview.setFixedSize(40, 25)
        self.timer_bg_color_preview.setStyleSheet('background: #232b3b; border: 2px solid #7b5cff; border-radius: 4px;')
        timer_bg_color_layout = QHBoxLayout()
        timer_bg_color_layout.addWidget(self.timer_bg_color_btn)
        timer_bg_color_layout.addWidget(self.timer_bg_color_preview)
        form_layout.addRow('–§–æ–Ω —Ç–∞–π–º–µ—Ä–∞:', timer_bg_color_layout)
        
        # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ñ–æ–Ω–∞
        self.opacity_spin = QSpinBox(self)
        self.opacity_spin.setRange(0, 100)
        self.opacity_spin.setValue(85)
        self.opacity_spin.setSuffix('%')
        form_layout.addRow('–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:', self.opacity_spin)
        
        # –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤
        self.border_radius_spin = QSpinBox(self)
        self.border_radius_spin.setRange(0, 500)
        self.border_radius_spin.setValue(36)
        self.border_radius_spin.setSuffix('px')
        form_layout.addRow('–°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤:', self.border_radius_spin)
        
        # –û—Ç—Å—Ç—É–ø—ã
        self.padding_spin = QSpinBox(self)
        self.padding_spin.setRange(10, 100)
        self.padding_spin.setValue(40)
        self.padding_spin.setSuffix('px')
        form_layout.addRow('–û—Ç—Å—Ç—É–ø—ã:', self.padding_spin)
        

        
        # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.show_seconds_checkbox = QCheckBox('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–∫—É–Ω–¥—ã', self)
        self.show_seconds_checkbox.setChecked(True)
        form_layout.addRow('', self.show_seconds_checkbox)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —á–∞—Å—ã
        self.show_hours_checkbox = QCheckBox('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —á–∞—Å—ã', self)
        self.show_hours_checkbox.setChecked(True)
        form_layout.addRow('', self.show_hours_checkbox)
        
        # –û–±–≤–æ–¥–∫–∞ —Ü–∏—Ñ—Ä
        self.outline_checkbox = QCheckBox('–í–∫–ª—é—á–∏—Ç—å –æ–±–≤–æ–¥–∫—É —Ü–∏—Ñ—Ä', self)
        self.outline_checkbox.setChecked(False)
        form_layout.addRow('', self.outline_checkbox)
        
        # –¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏
        self.outline_color_btn = QPushButton('–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç', self)
        self.outline_color_btn.clicked.connect(self.choose_outline_color)
        self.outline_color_preview = QLabel(self)
        self.outline_color_preview.setFixedSize(40, 25)
        self.outline_color_preview.setStyleSheet('background: #000000; border: 2px solid #7b5cff; border-radius: 4px;')
        outline_color_layout = QHBoxLayout()
        outline_color_layout.addWidget(self.outline_color_btn)
        outline_color_layout.addWidget(self.outline_color_preview)
        form_layout.addRow('–¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏:', outline_color_layout)
        
        # –¢–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏
        self.outline_width_spin = QSpinBox(self)
        self.outline_width_spin.setRange(1, 20)
        self.outline_width_spin.setValue(2)
        self.outline_width_spin.setSuffix('px')
        form_layout.addRow('–¢–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏:', self.outline_width_spin)
        
        layout.addLayout(form_layout)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        save_btn = QPushButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', self)
        cancel_btn = QPushButton('–û—Ç–º–µ–Ω–∞', self)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –∫–Ω–æ–ø–æ–∫
        save_btn.setDefault(True)  # –ö–Ω–æ–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cancel_btn.setAutoDefault(False)   # –ù–ï –∞–≤—Ç–æ-–¥–µ—Ñ–æ–ª—Ç–Ω–∞—è
        
        save_btn.clicked.connect(self.save_settings)
        cancel_btn.clicked.connect(self.reject)
        
        buttons_layout.addStretch()
        buttons_layout.addWidget(cancel_btn)
        buttons_layout.addWidget(save_btn)
        
        layout.addLayout(buttons_layout)
        self.setLayout(layout)
    
    def choose_bg_color(self):
        color_dialog = CustomColorDialog(getattr(self, 'bg_color', '#181f2a'), self)
        color = color_dialog.getColor()
        if color:
            self.bg_color = color
            self.bg_color_preview.setStyleSheet(f'background: {self.bg_color}; border: 2px solid #7b5cff; border-radius: 4px;')
    
    def choose_timer_color(self):
        color_dialog = CustomColorDialog(getattr(self, 'timer_color', '#ffffff'), self)
        color = color_dialog.getColor()
        if color:
            self.timer_color = color
            self.timer_color_preview.setStyleSheet(f'background: {self.timer_color}; border: 2px solid #7b5cff; border-radius: 4px;')
    
    def choose_timer_bg_color(self):
        color_dialog = CustomColorDialog(getattr(self, 'timer_bg_color', '#232b3b'), self)
        color = color_dialog.getColor()
        if color:
            self.timer_bg_color = color
            self.timer_bg_color_preview.setStyleSheet(f'background: {self.timer_bg_color}; border: 2px solid #7b5cff; border-radius: 4px;')

    
    def choose_outline_color(self):
        color_dialog = CustomColorDialog(getattr(self, 'outline_color', '#000000'), self)
        color = color_dialog.getColor()
        if color:
            self.outline_color = color
            self.outline_color_preview.setStyleSheet(f'background: {self.outline_color}; border: 2px solid #7b5cff; border-radius: 4px;')

    
    def load_settings(self):
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            settings = None
            if encrypted_config:
                settings = encrypted_config.load_config('html_timer_settings')
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if settings is None:
                with open(HTML_TIMER_SETTINGS_FILE, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
            if settings is not None:
                font_size_map = {
                    'very_small': '–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π',
                    'small': '–ú–∞–ª–µ–Ω—å–∫–∏–π', 
                    'medium': '–°—Ä–µ–¥–Ω–∏–π',
                    'large': '–ë–æ–ª—å—à–æ–π'
                }
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–∞
                font_family = settings.get('font_family', 'Segoe UI')
                font_index = self.font_family_combo.findText(font_family)
                if font_index >= 0:
                    self.font_family_combo.setCurrentIndex(font_index)
                else:
                    self.font_family_combo.setCurrentText('Segoe UI')
                
                font_size = settings.get('font_size', 'medium')
                self.font_size_combo.setCurrentText(font_size_map.get(font_size, '–°—Ä–µ–¥–Ω–∏–π'))
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã
                self.show_game_name_checkbox.setChecked(settings.get('show_game_name', False))
                game_name_position = settings.get('game_name_position', 'top')
                position_text = '–°–≤–µ—Ä—Ö—É —Ç–∞–π–º–µ—Ä–∞' if game_name_position == 'top' else '–°–Ω–∏–∑—É —Ç–∞–π–º–µ—Ä–∞'
                self.game_name_position_combo.setCurrentText(position_text)
                
                self.bg_color = settings.get('bg_color', '#181f2a')
                self.bg_color_preview.setStyleSheet(f'background: {self.bg_color}; border: 2px solid #7b5cff; border-radius: 4px;')
                
                self.timer_color = settings.get('timer_color', '#ffffff')
                self.timer_color_preview.setStyleSheet(f'background: {self.timer_color}; border: 2px solid #7b5cff; border-radius: 4px;')
                
                self.timer_bg_color = settings.get('timer_bg_color', '#232b3b')
                self.timer_bg_color_preview.setStyleSheet(f'background: {self.timer_bg_color}; border: 2px solid #7b5cff; border-radius: 4px;')

                
                self.opacity_spin.setValue(settings.get('opacity', 85))
                self.border_radius_spin.setValue(settings.get('border_radius', 36))
                self.padding_spin.setValue(settings.get('padding', 40))
                self.show_seconds_checkbox.setChecked(settings.get('show_seconds', True))
                self.show_hours_checkbox.setChecked(settings.get('show_hours', True))
                self.outline_checkbox.setChecked(settings.get('outline', False))
                self.outline_color = settings.get('outline_color', '#000000')
                self.outline_color_preview.setStyleSheet(f'background: {self.outline_color}; border: 2px solid #7b5cff; border-radius: 4px;')
                self.outline_width_spin.setValue(settings.get('outline_width', 2))
            else:
                # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
                self.font_family_combo.setCurrentText('Segoe UI')
                self.font_size_combo.setCurrentText('–°—Ä–µ–¥–Ω–∏–π')
                self.show_game_name_checkbox.setChecked(False)
                self.game_name_position_combo.setCurrentText('–°–≤–µ—Ä—Ö—É —Ç–∞–π–º–µ—Ä–∞')
                self.bg_color = '#181f2a'
                self.bg_color_preview.setStyleSheet(f'background: {self.bg_color}; border: 2px solid #7b5cff; border-radius: 4px;')
                self.timer_color = '#ffffff'
                self.timer_color_preview.setStyleSheet(f'background: {self.timer_color}; border: 2px solid #7b5cff; border-radius: 4px;')
                self.timer_bg_color = '#232b3b'
                self.timer_bg_color_preview.setStyleSheet(f'background: {self.timer_bg_color}; border: 2px solid #7b5cff; border-radius: 4px;')
                self.outline_color = '#000000'
                self.outline_color_preview.setStyleSheet(f'background: {self.outline_color}; border: 2px solid #7b5cff; border-radius: 4px;')
                self.opacity_spin.setValue(85)
                self.border_radius_spin.setValue(36)
                self.padding_spin.setValue(40)
                self.show_seconds_checkbox.setChecked(True)
                self.show_hours_checkbox.setChecked(True)
                self.outline_checkbox.setChecked(False)
                self.outline_width_spin.setValue(2)
                
        except FileNotFoundError:
            # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            self.font_family_combo.setCurrentText('Segoe UI')
            self.font_size_combo.setCurrentText('–°—Ä–µ–¥–Ω–∏–π')
            self.show_game_name_checkbox.setChecked(False)
            self.game_name_position_combo.setCurrentText('–°–≤–µ—Ä—Ö—É —Ç–∞–π–º–µ—Ä–∞')
            self.bg_color = '#181f2a'
            self.bg_color_preview.setStyleSheet(f'background: {self.bg_color}; border: 2px solid #7b5cff; border-radius: 4px;')
            self.timer_color = '#ffffff'
            self.timer_color_preview.setStyleSheet(f'background: {self.timer_color}; border: 2px solid #7b5cff; border-radius: 4px;')
            self.timer_bg_color = '#232b3b'
            self.timer_bg_color_preview.setStyleSheet(f'background: {self.timer_bg_color}; border: 2px solid #7b5cff; border-radius: 4px;')
            self.outline_color = '#000000'
            self.outline_color_preview.setStyleSheet(f'background: {self.outline_color}; border: 2px solid #7b5cff; border-radius: 4px;')
            self.opacity_spin.setValue(85)
            self.border_radius_spin.setValue(36)
            self.padding_spin.setValue(40)
            self.show_seconds_checkbox.setChecked(True)
            self.show_hours_checkbox.setChecked(True)
            self.outline_checkbox.setChecked(False)
            self.outline_width_spin.setValue(2)
    
    def save_settings(self):
        font_size_map = {
            '–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π': 'very_small',
            '–ú–∞–ª–µ–Ω—å–∫–∏–π': 'small',
            '–°—Ä–µ–¥–Ω–∏–π': 'medium', 
            '–ë–æ–ª—å—à–æ–π': 'large'
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã
        game_name_position = 'top' if self.game_name_position_combo.currentText() == '–°–≤–µ—Ä—Ö—É —Ç–∞–π–º–µ—Ä–∞' else 'bottom'
        
        settings = {
            'font_family': self.font_family_combo.currentText(),
            'font_size': font_size_map.get(self.font_size_combo.currentText(), 'medium'),
            'show_game_name': self.show_game_name_checkbox.isChecked(),
            'game_name_position': game_name_position,
            'bg_color': getattr(self, 'bg_color', '#181f2a'),
            'timer_color': getattr(self, 'timer_color', '#ffffff'),
            'timer_bg_color': getattr(self, 'timer_bg_color', '#232b3b'),
            'opacity': self.opacity_spin.value(),
            'border_radius': self.border_radius_spin.value(),
            'padding': self.padding_spin.value(),
            'show_seconds': self.show_seconds_checkbox.isChecked(),
            'show_hours': self.show_hours_checkbox.isChecked(),
            'outline': self.outline_checkbox.isChecked(),
            'outline_color': getattr(self, 'outline_color', '#000000'),
            'outline_width': self.outline_width_spin.value()
        }
        

        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        if encrypted_config:
            encrypted_config.save_config(html_settings=settings)
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—ã—á–Ω–æ–º —Ñ–∞–π–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        with open(HTML_TIMER_SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º overlay —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(self.parent(), 'overlay_timer'):
            self.parent().overlay_timer.refresh_settings()
            self.parent().overlay_timer.apply_html_settings()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML –¥–ª—è WebSocket
        self.update_live_html()
        
        QMessageBox.information(self, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ HTML —Ç–∞–π–º–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä.')
        self.accept()
    
    def update_live_html(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
            font_size_map = {
                '–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π': 'very_small',
                '–ú–∞–ª–µ–Ω—å–∫–∏–π': 'small',
                '–°—Ä–µ–¥–Ω–∏–π': 'medium', 
                '–ë–æ–ª—å—à–æ–π': 'large'
            }
            
            game_name_position = 'top' if self.game_name_position_combo.currentText() == '–°–≤–µ—Ä—Ö—É —Ç–∞–π–º–µ—Ä–∞' else 'bottom'
            
            settings = {
                'font_family': self.font_family_combo.currentText(),
                'font_size': font_size_map.get(self.font_size_combo.currentText(), 'medium'),
                'show_game_name': self.show_game_name_checkbox.isChecked(),
                'game_name_position': game_name_position,
                'bg_color': getattr(self, 'bg_color', '#181f2a'),
                'timer_color': getattr(self, 'timer_color', '#ffffff'),
                'timer_bg_color': getattr(self, 'timer_bg_color', '#232b3b'),
                'opacity': self.opacity_spin.value(),
                'border_radius': self.border_radius_spin.value(),
                'padding': self.padding_spin.value(),
                'show_seconds': self.show_seconds_checkbox.isChecked(),
                'show_hours': self.show_hours_checkbox.isChecked(),
                'outline': self.outline_checkbox.isChecked(),
                'outline_color': getattr(self, 'outline_color', '#000000'),
                'outline_width': self.outline_width_spin.value()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –∏–≥—Ä—É –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if hasattr(self.parent(), 'last_time_str'):
                settings['current_time'] = self.parent().last_time_str
            else:
                settings['current_time'] = '00:00:00'
                
            if hasattr(self.parent(), 'current_game') and self.parent().current_game:
                settings['current_game'] = self.parent().current_game
            else:
                settings['current_game'] = 'Timer'
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é generate_html_with_settings –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if hasattr(self.parent(), 'generate_html_with_settings'):
                html = self.parent().generate_html_with_settings(settings)
            else:
                html = self.generate_html()  # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            html_file_path = os.path.join(WORK_DIR, 'timer_live.html')
            with open(html_file_path, 'w', encoding='utf-8') as f:
                f.write(html)
            

                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è live HTML: {e}")
    

    def generate_html(self):
        font_size_map = {
            '–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π': 'min(12vw, 20vh)',
            '–ú–∞–ª–µ–Ω—å–∫–∏–π': 'min(16vw, 28vh)',
            '–°—Ä–µ–¥–Ω–∏–π': 'min(22vw, 40vh)',
            '–ë–æ–ª—å—à–æ–π': 'min(28vw, 50vh)'
        }
        
        font_family = self.font_family_combo.currentText()
        font_size = font_size_map.get(self.font_size_combo.currentText(), 'min(22vw, 40vh)')
        show_game_name = self.show_game_name_checkbox.isChecked()
        game_name_position = 'top' if self.game_name_position_combo.currentText() == '–°–≤–µ—Ä—Ö—É —Ç–∞–π–º–µ—Ä–∞' else 'bottom'
        bg_color = getattr(self, 'bg_color', '#181f2a')
        timer_color = getattr(self, 'timer_color', '#ffffff')
        timer_bg_color = getattr(self, 'timer_bg_color', '#232b3b')
        opacity = self.opacity_spin.value()
        border_radius = self.border_radius_spin.value()
        padding = self.padding_spin.value()
        show_seconds = self.show_seconds_checkbox.isChecked()
        show_hours = self.show_hours_checkbox.isChecked()
        outline = self.outline_checkbox.isChecked()
        outline_color = getattr(self, 'outline_color', '#000000')
        outline_width = self.outline_width_spin.value()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –æ–±–≤–æ–¥–∫–∏
        outline_style = ''
        if outline:
            # –°–æ–∑–¥–∞–µ–º –æ–±–≤–æ–¥–∫—É —Å –ø–æ–º–æ—â—å—é text-shadow
            outline_shadows = []
            for i in range(-outline_width, outline_width + 1):
                for j in range(-outline_width, outline_width + 1):
                    if i != 0 or j != 0:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
                        outline_shadows.append(f'{i}px {j}px 0 {outline_color}')
            outline_style = f'text-shadow: {", ".join(outline_shadows)};'
        
        time_format = 'HH:mm:ss' if show_hours and show_seconds else 'HH:mm' if show_hours else 'mm:ss' if show_seconds else 'mm'
        
        html = f'''<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="UTF-8">
<title>GameLeague Timer</title>
<style>
html, body {{
  height: 100%;
  margin: 0;
  padding: 0;
}}
body {{
  width: 100vw;
  height: 100vh;
  background: {bg_color};
  color: {timer_color};
  font-family: Segoe UI, Arial, sans-serif;
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  overflow: hidden;
}}
#timer-bg {{
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: {padding}px;
  background: {timer_bg_color};
  border-radius: {border_radius}px;
  {shadow_style}
}}
#timer {{
  display: block;
  margin: 0 auto;
  font-size: {font_size};
  font-weight: bold;
  text-align: center;
  user-select: none;
  letter-spacing: -0.05em;
  line-height: 1;
  transform: translate(-7px, -17px);
  {outline_style}
}}
@media (max-width: 900px) {{
  #timer {{ font-size: calc({font_size} * 0.7); }}
  #timer-bg {{ padding: calc({padding}px * 0.5); border-radius: calc({border_radius}px * 0.5); }}
}}
</style>
</head>
<body>
<div id="timer-bg"><div id="timer">00:00:00</div></div>
<script>
let ws = null;
function connect() {{
  ws = new WebSocket('ws://' + window.location.hostname + ':' + window.location.port + '/ws');
  ws.onmessage = function(e) {{
    let time = e.data;
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    let parts = time.split(':');
    if (parts.length === 3) {{
      let hours = parts[0];
      let minutes = parts[1];
      let seconds = parts[2];
      
      if ('{time_format}' === 'HH:mm:ss') {{
        time = hours + ':' + minutes + ':' + seconds;
      }} else if ('{time_format}' === 'HH:mm') {{
        time = hours + ':' + minutes;
      }} else if ('{time_format}' === 'mm:ss') {{
        time = minutes + ':' + seconds;
      }} else {{
        time = minutes;
      }}
    }}
    document.getElementById('timer').textContent = time;
  }};
  ws.onclose = function() {{ setTimeout(connect, 1000); }};
}}
connect();
</script>
</body>
</html>'''
        
        return html

class ImageLoader(QThread):
    image_loaded = pyqtSignal(str, QPixmap)
    
    def __init__(self, url, game_name, target_size=(160, 120)):
        super().__init__()
        self.url = url
        self.game_name = game_name
        self.target_size = target_size
    
    def run(self):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
            with urllib.request.urlopen(self.url, timeout=10) as response:
                image_data = response.read()
                pixmap = QPixmap()
                
                if pixmap.loadFromData(image_data):
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                    scaled_pixmap = pixmap.scaled(
                        self.target_size[0], 
                        self.target_size[1], 
                        Qt.KeepAspectRatio, 
                        Qt.SmoothTransformation
                    )
                    self.image_loaded.emit(self.game_name, scaled_pixmap)
                else:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {self.game_name}")
                    self.image_loaded.emit(self.game_name, self.create_placeholder())
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {self.game_name}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.image_loaded.emit(self.game_name, self.create_placeholder())
    
    def create_placeholder(self):
        """–°–æ–∑–¥–∞–µ—Ç placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–æ–π –∏–≥—Ä—ã"""
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        pixmap = QPixmap(self.target_size[0], self.target_size[1])
        pixmap.fill(Qt.transparent)
        
        # –°–æ–∑–¥–∞–µ–º painter –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        from PyQt5.QtGui import QPainter, QFont, QColor
        
        painter = QPainter(pixmap)
        painter.setRenderHint(QPainter.Antialiasing)
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω
        painter.fillRect(0, 0, self.target_size[0], self.target_size[1], QColor('#232b3b'))
        
        # –†–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É –∏–≥—Ä—ã (–ø—Ä–æ—Å—Ç–æ–π —Å–∏–º–≤–æ–ª)
        painter.setPen(QColor('#7b5cff'))
        painter.setFont(QFont('Arial', min(self.target_size[0], self.target_size[1]) // 4, QFont.Bold))
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = "üéÆ"
        text_rect = painter.fontMetrics().boundingRect(text)
        x = (self.target_size[0] - text_rect.width()) // 2
        y = (self.target_size[1] + text_rect.height()) // 2
        painter.drawText(x, y, text)
        
        painter.end()
        return pixmap

class WebSocketSettingsDialog(QDialog):
    def __init__(self, parent=None, port=8765):
        super().__init__(parent)
        self.setWindowTitle('WebSocket –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
        self.setFixedSize(300, 100)
        layout = QFormLayout()
        self.port_spin = QSpinBox(self)
        self.port_spin.setRange(1024, 65535)
        self.port_spin.setValue(port)
        layout.addRow('–ü–æ—Ä—Ç:', self.port_spin)
        btn = QPushButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', self)
        btn.clicked.connect(self.accept)
        layout.addWidget(btn)
        self.setLayout(layout)
    def get_port(self):
        return self.port_spin.value()

class AddGameDialog(QDialog):
    def __init__(self, parent=None, is_editing=False):
        super().__init__(parent)
        self.is_editing = is_editing
        title = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É' if is_editing else '–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É'
        self.setWindowTitle(title)
        self.setFixedSize(400, 250)
        self.init_ui()
    
    def init_ui(self):
        layout = QFormLayout()
        
        self.game_name_input = QLineEdit(self)
        self.game_name_input.setPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã')
        layout.addRow('–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:', self.game_name_input)
        
        self.image_url_input = QLineEdit(self)
        self.image_url_input.setPlaceholderText('https://example.com/image.jpg')
        layout.addRow('–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', self.image_url_input)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        self.time_to_beat_input = QSpinBox(self)
        self.time_to_beat_input.setRange(0, 9999)
        self.time_to_beat_input.setSuffix(' –º–∏–Ω—É—Ç')
        self.time_to_beat_input.setToolTip('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏–≥—Ä—ã –≤ –º–∏–Ω—É—Ç–∞—Ö')
        layout.addRow('–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:', self.time_to_beat_input)
        
        buttons = QHBoxLayout()
        ok_text = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' if self.is_editing else '–î–æ–±–∞–≤–∏—Ç—å'
        ok_button = QPushButton(ok_text)
        cancel_button = QPushButton('–û—Ç–º–µ–Ω–∞')
        
        ok_button.clicked.connect(self.accept)
        cancel_button.clicked.connect(self.reject)
        
        buttons.addWidget(ok_button)
        buttons.addWidget(cancel_button)
        layout.addRow(buttons)
        
        self.setLayout(layout)
    
    def get_game_data(self):
        return {
            'name': self.game_name_input.text().strip(),
            'image_url': self.image_url_input.text().strip(),
            'time_to_beat_average': self.time_to_beat_input.value()
        }

class GameListItemWidget(QWidget):
    def __init__(self, game_name, pixmap=None, parent=None):
        super().__init__(parent)
        layout = QHBoxLayout(self)
        layout.setContentsMargins(8, 4, 8, 4)
        layout.setSpacing(12)
        self.image_label = QLabel(self)
        self.image_label.setFixedSize(100, 100)
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setStyleSheet('''
            border-radius: 10px; 
            background: #181f2a; 
            border: 2px solid #2e3950;
        ''')
        if pixmap and not pixmap.isNull():
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞
            scaled_pixmap = pixmap.scaled(100, 100, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            self.image_label.setPixmap(scaled_pixmap)
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º placeholder
            self.set_placeholder_image()
        layout.addWidget(self.image_label)
        self.name_label = QLabel(game_name, self)
        self.name_label.setStyleSheet('font-size: 20px; color: #e6e6e6;')
        layout.addWidget(self.name_label)
        layout.addStretch(1)
        self.setLayout(layout)
    
    def set_placeholder_image(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞"""
        from PyQt5.QtGui import QPainter, QFont, QColor
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        pixmap = QPixmap(100, 100)
        pixmap.fill(Qt.transparent)
        
        painter = QPainter(pixmap)
        painter.setRenderHint(QPainter.Antialiasing)
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω
        painter.fillRect(0, 0, 100, 100, QColor('#181f2a'))
        
        # –†–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É –∏–≥—Ä—ã
        painter.setPen(QColor('#7b5cff'))
        painter.setFont(QFont('Arial', 24, QFont.Bold))
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = "üéÆ"
        text_rect = painter.fontMetrics().boundingRect(text)
        x = (100 - text_rect.width()) // 2
        y = (100 + text_rect.height()) // 2
        painter.drawText(x, y, text)
        
        painter.end()
        self.image_label.setPixmap(pixmap)

class GameCardWidget(QWidget):
    def __init__(self, game_name, pixmap=None, selected=False, parent=None, idx=None, time_to_beat=None, current_time=0):
        super().__init__(parent)
        self.game_name = game_name
        self.selected = selected
        self.idx = idx
        self.time_to_beat = time_to_beat
        self.current_time = current_time
        self.setFixedSize(280, 360)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.setStyleSheet(self._get_style())
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–∏–¥–∂–µ—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
        self.setMouseTracking(True)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(8, 8, 8, 8)
        layout.setSpacing(8)
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É
        self.image_label = QLabel(self)
        self.image_label.setFixedSize(240, 240)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 100% (–±—ã–ª–æ 120x120)
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setStyleSheet('''
            border-radius: 12px; 
            background: #232b3b; 
            border: 2px solid #2e3950;
        ''')
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
        self.image_label.setMouseTracking(False)
        if pixmap and not pixmap.isNull():
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            scaled_pixmap = pixmap.scaled(240, 240, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            self.image_label.setPixmap(scaled_pixmap)
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º placeholder –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            self.set_placeholder_image()
        layout.addWidget(self.image_label)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        self.name_label = QLabel(game_name, self)
        self.name_label.setAlignment(Qt.AlignCenter)
        self.name_label.setWordWrap(True)  # –ü–µ—Ä–µ–Ω–æ—Å —Å–ª–æ–≤
        self.name_label.setStyleSheet('''
            font-size: 18px; 
            color: #e6e6e6; 
            font-weight: bold;
            padding: 4px;
            background: transparent;
            border: none;
        ''')
        layout.addWidget(self.name_label)
        
        # –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        self.time_label = QLabel(self)
        self.time_label.setAlignment(Qt.AlignCenter)
        self.time_label.setStyleSheet('''
            font-size: 14px; 
            color: #7b5cff; 
            font-weight: bold;
            padding: 2px;
            background: transparent;
            border: none;
        ''')
        if time_to_beat and time_to_beat > 0:
            hours = time_to_beat // 60
            minutes = time_to_beat % 60
            if hours > 0:
                time_text = f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {hours}—á {minutes}–º"
            else:
                time_text = f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {minutes}–º"
            self.time_label.setText(time_text)
        else:
            self.time_label.setText("–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        layout.addWidget(self.time_label)
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ —Å—Ä–µ–¥–Ω–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        self.current_time_label = QLabel(self)
        self.current_time_label.setAlignment(Qt.AlignCenter)
        self.current_time_label.setStyleSheet('''
            font-size: 12px; 
            color: #e6e6e6; 
            font-weight: normal;
            padding: 2px;
            background: transparent;
            border: none;
        ''')
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        if current_time > 0:
            hours = current_time // 3600
            minutes = (current_time % 3600) // 60
            seconds = current_time % 60
            if hours > 0:
                current_time_text = f"–í–∞—à–µ –≤—Ä–µ–º—è: {hours}—á {minutes}–º {seconds}—Å"
            elif minutes > 0:
                current_time_text = f"–í–∞—à–µ –≤—Ä–µ–º—è: {minutes}–º {seconds}—Å"
            else:
                current_time_text = f"–í–∞—à–µ –≤—Ä–µ–º—è: {seconds}—Å"
        else:
            current_time_text = "–í–∞—à–µ –≤—Ä–µ–º—è: 0—Å"
        self.current_time_label.setText(current_time_text)
        layout.addWidget(self.current_time_label)
        
        self.setLayout(layout)
    def set_selected(self, selected):
        self.selected = selected
        self.setStyleSheet(self._get_style())
    def set_pixmap(self, pixmap):
        if pixmap and not pixmap.isNull():
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            scaled_pixmap = pixmap.scaled(240, 240, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            self.image_label.setPixmap(scaled_pixmap)
        else:
            self.set_placeholder_image()
    
    def update_current_time(self, current_time):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.current_time = current_time
        if current_time > 0:
            hours = current_time // 3600
            minutes = (current_time % 3600) // 60
            seconds = current_time % 60
            if hours > 0:
                current_time_text = f"–í–∞—à–µ –≤—Ä–µ–º—è: {hours}—á {minutes}–º {seconds}—Å"
            elif minutes > 0:
                current_time_text = f"–í–∞—à–µ –≤—Ä–µ–º—è: {minutes}–º {seconds}—Å"
            else:
                current_time_text = f"–í–∞—à–µ –≤—Ä–µ–º—è: {seconds}—Å"
        else:
            current_time_text = "–í–∞—à–µ –≤—Ä–µ–º—è: 0—Å"
        self.current_time_label.setText(current_time_text)
    
    def set_placeholder_image(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        from PyQt5.QtGui import QPainter, QFont, QColor
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        pixmap = QPixmap(240, 240)
        pixmap.fill(Qt.transparent)
        
        painter = QPainter(pixmap)
        painter.setRenderHint(QPainter.Antialiasing)
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω
        painter.fillRect(0, 0, 240, 240, QColor('#232b3b'))
        
        # –†–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É –∏–≥—Ä—ã
        painter.setPen(QColor('#7b5cff'))
        painter.setFont(QFont('Arial', 56, QFont.Bold))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = "üéÆ"
        text_rect = painter.fontMetrics().boundingRect(text)
        x = (240 - text_rect.width()) // 2
        y = (240 + text_rect.height()) // 2
        painter.drawText(x, y, text)
        
        painter.end()
        self.image_label.setPixmap(pixmap)
    def _get_style(self):
        if self.selected:
            return 'background: #7b5cff; border-radius: 16px; border: 2px solid #fff;'
        else:
            return 'background: #232b3b; border-radius: 16px; border: 2px solid #232b3b;'
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton and hasattr(self.parent(), 'on_card_clicked'):
            self.parent().on_card_clicked(self)
    def mouseDoubleClickEvent(self, event):
        if event.button() == Qt.LeftButton and hasattr(self.parent(), 'on_card_double_clicked'):
            self.parent().on_card_double_clicked(self)
    
    def apply_theme(self, theme):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–≥—Ä—ã"""
        if not theme:
            return
        self.setStyleSheet(self._get_style(theme))
    
    def _get_style(self, theme=None):
        if not theme:
            # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
            bg_color = '#232b3b'
            border_color = '#2e3950'
            text_color = '#ffffff'
            selected_color = '#7b5cff'
        else:
            bg_color = theme['card_bg']
            border_color = theme['border_color']
            text_color = theme['text_color']
            selected_color = theme['accent_color']
        
        border = f'3px solid {selected_color}' if self.selected else f'1px solid {border_color}'
        return f'''
            QWidget {{
                background: {bg_color};
                border: {border};
                border-radius: 12px;
                color: {text_color};
            }}
            QWidget:hover {{
                border: 2px solid {selected_color};
            }}
        '''

class OverlayTimerLabel(QLabel):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π QLabel —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–≤–æ–¥–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self.outline_enabled = False
        self.outline_color = '#000000'
        self.outline_width = 2
    
    def set_outline(self, enabled, color='#000000', width=2):
        self.outline_enabled = enabled
        self.outline_color = color
        self.outline_width = width
        self.update()
    
    def paintEvent(self, event):
        if not self.outline_enabled:
            super().paintEvent(event)
            return
        
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä—ã
        text = self.text()
        font = self.font()
        painter.setFont(font)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
        rect = self.rect()
        flags = self.alignment()
        
        # –†–∏—Å—É–µ–º –æ–±–≤–æ–¥–∫—É
        painter.setPen(QPen(QColor(self.outline_color), self.outline_width, Qt.SolidLine))
        
        # –†–∏—Å—É–µ–º –æ–±–≤–æ–¥–∫—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
        for dx in range(-self.outline_width, self.outline_width + 1):
            for dy in range(-self.outline_width, self.outline_width + 1):
                if dx != 0 or dy != 0:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
                    painter.drawText(rect.adjusted(dx, dy, dx, dy), flags, text)
        
        # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        painter.setPen(self.palette().color(QPalette.WindowText))
        painter.drawText(rect, flags, text)

class OverlayTimerWindow(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle('GameLeague Timer - –ü–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω')
        self.setFixedSize(300, 150)
        self.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.FramelessWindowHint | Qt.Tool)
        self.setAttribute(Qt.WA_TranslucentBackground)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTML —Ç–∞–π–º–µ—Ä–∞
        self.html_settings = self.load_html_settings()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –æ–∫–Ω—É
        self.apply_html_settings()
        
        self.init_ui()
        self.dragging = False
        self.offset = None
    
    def load_html_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTML —Ç–∞–π–º–µ—Ä–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if encrypted_config:
                settings = encrypted_config.load_config('html_timer_settings')
                if settings is not None:
                    return settings
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with open(HTML_TIMER_SETTINGS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                'font_size': 'medium',
                'bg_color': '#181f2a',
                'timer_color': '#ffffff',
                'timer_bg_color': '#232b3b',
                'opacity': 85,
                'border_radius': 36,
                'padding': 40,
                'shadow': True,
                'shadow_size': 32,
                'show_seconds': True,
                'show_hours': True,
                'outline': False,
                'outline_color': '#000000',
                'outline_width': 2
            }
    
    def apply_html_settings(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTML —Ç–∞–π–º–µ—Ä–∞ –∫ overlay –æ–∫–Ω—É"""
        settings = self.html_settings
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
        bg_color = settings.get('bg_color', '#181f2a')
        timer_color = settings.get('timer_color', '#ffffff')
        timer_bg_color = settings.get('timer_bg_color', '#232b3b')
        opacity = settings.get('opacity', 85)
        border_radius = settings.get('border_radius', 36)
        padding = settings.get('padding', 40)
        shadow = settings.get('shadow', True)
        shadow_size = settings.get('shadow_size', 32)
        outline = settings.get('outline', False)
        outline_color = settings.get('outline_color', '#000000')
        outline_width = settings.get('outline_width', 2)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEX –≤ RGB –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        bg_r = int(bg_color[1:3], 16)
        bg_g = int(bg_color[3:5], 16)
        bg_b = int(bg_color[5:7], 16)
        bg_alpha = opacity / 100
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        font_size_map = {
            'very_small': 24,
            'small': 32,
            'medium': 36,
            'large': 48,
            'very_large': 56,
            'giant': 64
        }
        font_size = font_size_map.get(settings.get('font_size', 'medium'), 36)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å —Ç–µ–Ω–∏ (Qt –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–Ω–∏)
        shadow_style = ''
        if shadow:
            shadow_style = f'border: 2px solid rgba(0,0,0,0.2);'
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.setStyleSheet(f'''
            QWidget {{
                background-color: rgba({bg_r}, {bg_g}, {bg_b}, {bg_alpha});
                color: {timer_color};
                border-radius: {border_radius}px;
                border: none;
                {shadow_style}
            }}
            QLabel#timerLabel {{
                font-size: {font_size}px;
                font-weight: bold;
                color: {timer_color};
                background: {timer_bg_color};
                border: none;
                padding: {padding}px;
                border-radius: {border_radius}px;
            }}
        ''')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        new_width = padding * 2 + font_size * 6  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        new_height = padding * 2 + font_size * 1.5  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        self.setFixedSize(int(new_width), int(new_height))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–≤–æ–¥–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ paintEvent
        self.outline_enabled = outline
        self.outline_color = outline_color
        self.outline_width = outline_width
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–≤–æ–¥–∫—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–µ–π–±–ª–∞
        if hasattr(self, 'timer_label') and isinstance(self.timer_label, OverlayTimerLabel):
            self.timer_label.set_outline(outline, outline_color, outline_width)
    
    def refresh_settings(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ overlay —Ç–∞–π–º–µ—Ä–∞"""
        self.html_settings = self.load_html_settings()
        self.apply_html_settings()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–≤–æ–¥–∫—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–µ–π–±–ª–∞
        if hasattr(self, 'timer_label') and isinstance(self.timer_label, OverlayTimerLabel):
            settings = self.html_settings
            outline = settings.get('outline', False)
            outline_color = settings.get('outline_color', '#000000')
            outline_width = settings.get('outline_width', 2)
            self.timer_label.set_outline(outline, outline_color, outline_width)
    
    def init_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        
        # –¢–∞–π–º–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
        self.timer_label = OverlayTimerLabel('00:00:00', self)
        self.timer_label.setObjectName('timerLabel')
        self.timer_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.timer_label)
        
        self.setLayout(layout)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–≤–æ–¥–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–π–±–ª–∞
        if hasattr(self, 'outline_enabled'):
            self.timer_label.set_outline(self.outline_enabled, self.outline_color, self.outline_width)
    
    def update_time(self, time_str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        settings = self.html_settings
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        parts = time_str.split(':')
        if len(parts) == 3:
            hours, minutes, seconds = parts
        elif len(parts) == 2:
            minutes, seconds = parts
            hours = '00'
        else:
            self.timer_label.setText(time_str)
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        show_hours = settings.get('show_hours', True)
        show_seconds = settings.get('show_seconds', True)
        
        if show_hours and show_seconds:
            formatted_time = f'{hours}:{minutes}:{seconds}'
        elif show_hours:
            formatted_time = f'{hours}:{minutes}'
        elif show_seconds:
            formatted_time = f'{minutes}:{seconds}'
        else:
            formatted_time = minutes
        
        self.timer_label.setText(formatted_time)
    
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.dragging = True
            self.offset = event.pos()
    
    def mouseMoveEvent(self, event):
        if self.dragging and self.offset:
            new_pos = self.mapToParent(event.pos() - self.offset)
            self.move(new_pos)
    
    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.dragging = False
            self.offset = None
    
    def apply_theme(self, theme):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ –æ–∫–Ω—É –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTML —Ç–∞–π–º–µ—Ä–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö
        self.html_settings = self.load_html_settings()
        self.apply_html_settings()

class GameGridWidget(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.grid = QGridLayout(self)
        self.grid.setSpacing(6)
        self.grid.setContentsMargins(8, 8, 8, 8)
        self.cards = []
        self.selected_idx = None
        self.setLayout(self.grid)
    def set_games(self, games, images):
        for card in self.cards:
            card.setParent(None)
        self.cards = []
        cols = 2  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        for idx, (game_name, game_info) in enumerate(games.items()):
            pixmap = images.get(game_name)
            time_to_beat = game_info.get('time_to_beat_average', 0) if isinstance(game_info, dict) else 0
            current_time = game_info.get('seconds', 0) if isinstance(game_info, dict) else 0
            card = GameCardWidget(game_name, pixmap, selected=(idx==self.selected_idx), parent=self, idx=idx, time_to_beat=time_to_beat, current_time=current_time)
            row, col = divmod(idx, cols)
            self.grid.addWidget(card, row, col)
            self.cards.append(card)
    def on_card_clicked(self, card_widget):
        idx = card_widget.idx
        if self.selected_idx is not None and 0 <= self.selected_idx < len(self.cards):
            self.cards[self.selected_idx].set_selected(False)
        self.selected_idx = idx
        self.cards[idx].set_selected(True)
    def get_selected_game(self, games):
        if self.selected_idx is not None and 0 <= self.selected_idx < len(self.cards):
            return list(games.keys())[self.selected_idx]
        return None
    def on_card_double_clicked(self, card_widget):
        # –ò—â–µ–º GameSelectionPage —Å—Ä–µ–¥–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        parent = self.parent()
        while parent:
            if hasattr(parent, 'edit_game'):
                parent.edit_game(card_widget.game_name)
                return
            parent = parent.parent()
    
    def update_game_time(self, game_name, new_time):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–µ"""
        for card in self.cards:
            if card.game_name == game_name:
                card.update_current_time(new_time)
                break

class GameSelectionPage(QWidget):
    def __init__(self, parent=None, timer_app=None):
        super().__init__(parent)
        self.timer_app = timer_app  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.image_loaders = {}
        self.game_images = {}
        self.image_cache = {}  # –ö—ç—à –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.init_ui()
        self.load_games()
    def init_ui(self):
        self.setStyleSheet("""
QScrollBar:vertical {
    background: #232b3b;
    width: 12px;
    border-radius: 6px;
    margin: 0;
}
QScrollBar::handle:vertical {
    background: #7b5cff;
    border-radius: 6px;
    min-height: 20px;
}
QScrollBar::handle:vertical:hover {
    background: #8b6cff;
}
QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
    height: 0px;
}
QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
    background: none;
}
""")
        layout = QVBoxLayout()
        self.grid_widget = GameGridWidget(self)
        self.scroll_area = QScrollArea(self)
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setFrameShape(QScrollArea.NoFrame)
        self.scroll_area.setWidget(self.grid_widget)
        layout.addWidget(self.scroll_area)
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        btn_layout1 = QHBoxLayout()
        btn_layout1.setSpacing(12)
        
        self.add_game_btn = QPushButton('–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É')
        self.add_game_btn.setMinimumWidth(140)
        self.add_game_btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        self.add_game_btn.clicked.connect(self.add_game)
        
        self.edit_game_btn = QPushButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
        self.edit_game_btn.setMinimumWidth(140)
        self.edit_game_btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        self.edit_game_btn.clicked.connect(self.edit_selected_game)
        
        self.remove_game_btn = QPushButton('–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É')
        self.remove_game_btn.setMinimumWidth(140)
        self.remove_game_btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        self.remove_game_btn.clicked.connect(self.remove_game)
        
        btn_layout1.addWidget(self.add_game_btn)
        btn_layout1.addWidget(self.edit_game_btn)
        btn_layout1.addWidget(self.remove_game_btn)
        layout.addLayout(btn_layout1)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        btn_layout2 = QHBoxLayout()
        btn_layout2.setSpacing(12)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä —Å GameLeague
        self.load_gameleague_btn = QPushButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å GameLeague')
        self.load_gameleague_btn.setMinimumWidth(200)
        self.load_gameleague_btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        self.load_gameleague_btn.clicked.connect(self.load_gameleague_games)
        btn_layout2.addWidget(self.load_gameleague_btn)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        btn_layout2.addStretch()
        layout.addLayout(btn_layout2)
        nav_layout = QHBoxLayout()
        self.back_btn = QPushButton('‚Üê –ù–∞–∑–∞–¥')
        self.next_btn = QPushButton('–î–∞–ª–µ–µ ‚Üí')
        nav_layout.addWidget(self.back_btn)
        nav_layout.addWidget(self.next_btn)
        layout.addLayout(nav_layout)
        
        # –ü—Ä–∏–∂–∏–º–∞–µ–º —Ñ—É—Ç–µ—Ä –∫ –Ω–∏–∑—É
        layout.addStretch()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä —Å –≤–µ—Ä—Å–∏–µ–π –∏ –∞–≤—Ç–æ—Ä–æ–º
        footer_layout = QHBoxLayout()
        self.version_label = QLabel(f'–í–µ—Ä—Å–∏—è: 1.1.11', self)
        self.version_label.setStyleSheet('color: #888888; font-size: 12px;')
        self.author_label = QLabel('by DeadKDV', self)
        self.author_label.setStyleSheet('color: #888888; font-size: 12px;')
        
        footer_layout.addWidget(self.version_label)
        footer_layout.addStretch()
        footer_layout.addWidget(self.author_label)
        layout.addLayout(footer_layout)
        
        self.setLayout(layout)
    

    def load_games(self):
        self.games_data = {}
        import glob
        log_files = glob.glob(os.path.join(LOGS_DIR, 'timer_log_*.json'))
        for log_file in log_files:
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    game_data = json.load(f)
                    game_name = game_data.get('game_name', '')
                    if game_name:
                        self.games_data[game_name] = {
                            'seconds': game_data.get('total_time_seconds', 0),
                            'image_url': game_data.get('image_url', ''),
                            'time_to_beat_average': game_data.get('time_to_beat_average', 0)
                        }
            except Exception:
                continue
        if not self.games_data:
            self.games_data = {
                '–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–π –∏–≥—Ä—É': {'seconds': 0, 'image_url': '', 'time_to_beat_average': 0},
            }
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for game_name, game_info in self.games_data.items():
            if game_info.get('image_url'):
                self.load_game_image(game_name, game_info['image_url'])
        self.update_grid()
    def update_grid(self):
        self.grid_widget.set_games(self.games_data, self.game_images)
    
    def update_game_time_in_grid(self, game_name, new_time):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã –≤ —Å–µ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if game_name in self.games_data:
            self.games_data[game_name]['seconds'] = new_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        self.grid_widget.update_game_time(game_name, new_time)
    def load_game_image(self, game_name, image_url):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if image_url in self.image_cache:
            self.game_images[game_name] = self.image_cache[image_url]
            self.update_grid()
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä 240x240 –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        loader = ImageLoader(image_url, game_name, target_size=(240, 240))
        loader.image_loaded.connect(self.on_image_loaded)
        self.image_loaders[game_name] = loader
        loader.start()
    def on_image_loaded(self, game_name, pixmap):
        self.game_images[game_name] = pixmap
        self.update_grid()
    def get_selected_game(self):
        return self.grid_widget.get_selected_game(self.games_data)

    def add_game(self):
        dialog = AddGameDialog(self, is_editing=False)
        if dialog.exec_() == QDialog.Accepted:
            game_data = dialog.get_game_data()
            game_name = game_data['name']
            image_url = game_data['image_url']
            time_to_beat = game_data['time_to_beat_average']
            if game_name and game_name not in self.games_data:
                safe_game_name = "".join(c for c in game_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
                safe_game_name = safe_game_name.replace(' ', '_')
                fname = os.path.join(LOGS_DIR, f"timer_log_{safe_game_name}.json")
                game_data_json = {
                    'game_name': game_name,
                    'image_url': image_url,
                    'time_to_beat_average': time_to_beat,
                    'total_time_seconds': 0,
                    'total_time_str': '00:00:00',
                    'sessions': [],
                    'last_updated': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                with open(fname, 'w', encoding='utf-8') as f:
                    json.dump(game_data_json, f, ensure_ascii=False, indent=2)
                self.load_games()

    def remove_game(self):
        import os
        selected_game = self.get_selected_game()
        if selected_game:
            reply = QMessageBox.question(self, '–£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã',
                                         f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É "{selected_game}"?\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!',
                                         QMessageBox.Yes | QMessageBox.No)
            if reply == QMessageBox.Yes:
                safe_game_name = "".join(c for c in selected_game if c.isalnum() or c in (' ', '-', '_')).rstrip()
                safe_game_name = safe_game_name.replace(' ', '_')
                fname = os.path.join(LOGS_DIR, f"timer_log_{safe_game_name}.json")
                try:
                    os.remove(fname)
                except FileNotFoundError:
                    pass
                self.load_games()

    def edit_game(self, game_name):
        import os
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        game_info = self.games_data.get(game_name, {})
        dialog = AddGameDialog(self, is_editing=True)
        dialog.game_name_input.setText(game_name)
        dialog.image_url_input.setText(game_info.get('image_url', ''))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            safe_game_name = "".join(c for c in game_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_game_name = safe_game_name.replace(' ', '_')
            fname = os.path.join(LOGS_DIR, f"timer_log_{safe_game_name}.json")
            
            if os.path.exists(fname):
                with open(fname, 'r', encoding='utf-8') as f:
                    full_data = json.load(f)
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                    time_to_beat = full_data.get('time_to_beat_average', 0)
                    dialog.time_to_beat_input.setValue(time_to_beat)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        if dialog.exec_() == QDialog.Accepted:
            new_data = dialog.get_game_data()
            new_name = new_data['name']
            new_image_url = new_data['image_url']
            new_time_to_beat = new_data.get('time_to_beat_average', 0)
            
            if new_name:
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                old_safe = "".join(c for c in game_name if c.isalnum() or c in (' ', '-', '_')).rstrip().replace(' ', '_')
                new_safe = "".join(c for c in new_name if c.isalnum() or c in (' ', '-', '_')).rstrip().replace(' ', '_')
                old_fname = os.path.join(LOGS_DIR, f"timer_log_{old_safe}.json")
                new_fname = os.path.join(LOGS_DIR, f"timer_log_{new_safe}.json")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                try:
                    with open(old_fname, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                except Exception:
                    data = {}
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                data['game_name'] = new_name
                data['image_url'] = new_image_url
                data['time_to_beat_average'] = new_time_to_beat
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                with open(new_fname, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if old_fname != new_fname:
                    try:
                        os.remove(old_fname)
                    except Exception:
                        pass
                
                self.load_games()

    def edit_selected_game(self):
        selected_game = self.get_selected_game()
        if not selected_game:
            QMessageBox.warning(self, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!')
            return
        self.edit_game(selected_game)

    def load_gameleague_games(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–≥—Ä—ã —Å GameLeague API"""
        if not self.timer_app:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é')
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—ã —Å API
        games, error = self.timer_app.get_gameleague_games()
        
        if error:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ GameLeague
            if "–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ GameLeague" in error or "–Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ GameLeague" in error:
                QMessageBox.warning(self, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è GameLeague', 
                                  f"{error}\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                                  f"1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ GameLeague\n"
                                  f"2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Gmail –Ω–∞ —Å–∞–π—Ç–µ GameLeague")
            else:
                QMessageBox.warning(self, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', error)
            return
        
        if not games:
            QMessageBox.information(self, '–ù–µ—Ç –∏–≥—Ä', '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –Ω–∞ GameLeague')
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—ã –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        added_count = 0
        for game in games:
            game_name = game['name']
            image_url = game['image_url']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∏–≥—Ä–∞
            if game_name not in self.games_data:
                # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                safe_game_name = "".join(c for c in game_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
                safe_game_name = safe_game_name.replace(' ', '_')
                fname = os.path.join(LOGS_DIR, f"timer_log_{safe_game_name}.json")
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
                game_data_json = {
                    'game_name': game_name,
                    'image_url': image_url,
                    'gameleague_id': game.get('game_id'),  # ID –∏–≥—Ä—ã
                    'room_id': game.get('room_id'),  # ID –∫–æ–º–Ω–∞—Ç—ã (—ç—Ç–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è API)
                    'time_to_beat_average': game.get('time_to_beat_average', 0),
                    'total_time_seconds': 0,
                    'total_time_str': '00:00:00',
                    'sessions': [],
                    'last_updated': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                with open(fname, 'w', encoding='utf-8') as f:
                    json.dump(game_data_json, f, ensure_ascii=False, indent=2)
                
                added_count += 1
        
        if added_count > 0:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã
            self.load_games()
            QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –∏–≥—Ä —Å GameLeague!')
        else:
            QMessageBox.information(self, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–í—Å–µ –∏–≥—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ')
    
    def apply_theme(self, theme):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä"""
        if not theme:
            return
            
        self.setStyleSheet(f"""
QWidget {{
    background-color: {theme['bg_color']};
    color: {theme['text_color']};
}}
QScrollBar:vertical {{
    background: {theme['card_bg']};
    width: 12px;
    border-radius: 6px;
    margin: 0;
}}
QScrollBar::handle:vertical {{
    background: {theme['accent_color']};
    border-radius: 6px;
    min-height: 20px;
}}
QScrollBar::handle:vertical:hover {{
    background: {theme['accent_color']};
    opacity: 0.8;
}}
QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{
    border: none;
    background: none;
}}
QPushButton {{
    border-radius: 12px;
    padding: 10px 24px;
    font-size: 16px;
    font-weight: 500;
    background: {theme['button_bg']};
    color: {theme['text_color']};
    border: none;
}}
QPushButton:hover {{
    background: {theme['button_hover']};
}}
QLineEdit {{
    background: {theme['card_bg']};
    color: {theme['text_color']};
    border-radius: 10px;
    padding: 8px 12px;
    border: 1px solid {theme['border_color']};
    font-size: 14px;
}}
""")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä
        if hasattr(self, 'grid_widget') and self.grid_widget.cards:
            for card in self.grid_widget.cards:
                card.apply_theme(theme)

class TimerApp(QWidget):
    hotkey_signal = pyqtSignal()

    def __init__(self):
        print("DEBUG: TimerApp.__init__ —Å—Ç–∞—Ä—Ç—É–µ—Ç")
        super().__init__()
        self.setWindowTitle('GameLeague Timer')
        self.setFixedSize(700, 600)
        self.setWindowIcon(QIcon(LOGO_FILE))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        self.current_version = get_current_version()
        
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_time)
        self.seconds = 0
        self.running = False
        self.hotkey = None
        self.hotkey_display = None
        self.listening_hotkey = False
        self.finish_timer = None
        self.recorded_keys = []
        
        # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ö–æ—Ç–∫–µ–µ–≤ –ø–æ –ø—Ä–∏–º–µ—Ä—É
        self.hotkey_listener = HotkeyListener()
        print("DEBUG: HotkeyListener —Å–æ–∑–¥–∞–Ω –≤ TimerApp")
        self.hotkey_listener.main_window = self  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.hotkey_listener.start_listening()
        print("DEBUG: hotkey_listener.start_listening –≤—ã–∑–≤–∞–Ω –≤ TimerApp")
        self.user_email = None
        self.oauth_token = None
        self.ws_port = 8765
        self.ws_server = None
        self.ws_thread = None
        self.current_game = None
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        self.countdown_mode = False
        self.countdown_seconds = 0
        self.original_seconds = 0  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏
        self.real_time_during_countdown = 0  # –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.idle_notification_timer = QTimer()
        self.idle_notification_timer.timeout.connect(self.show_idle_notification)
        self.idle_countdown_timer = QTimer()
        self.idle_countdown_timer.timeout.connect(self.update_idle_countdown)
        self.idle_seconds_remaining = 300  # 5 –º–∏–Ω—É—Ç
        self.idle_notification_label = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—É (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ init_ui)
        self.current_theme = 'light'  # 'light' –∏–ª–∏ 'neon'
        self.themes = {
            'light': {
                'bg_color': '#181f2a',
                'card_bg': '#232b3b',
                'text_color': '#e6e6e6',
                'accent_color': '#7b5cff',
                'accent_gradient': 'qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #7b5cff, stop:1 #4e44ce)',
                'border_color': '#2e3950',
                'button_bg': '#232b3b',
                'button_hover': '#2e3950',
                'timer_bg': '#232b3b',
                'timer_color': '#ffffff',
                'reset_color': '#F83F42'
            },
            'neon': {
                'bg_color': '#000000',
                'card_bg': '#0a0a0a',
                'text_color': '#ff0000',
                'accent_color': '#ff0000',
                'accent_gradient': 'qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #ff0000, stop:1 #cc0000)',
                'border_color': '#ff0000',
                'button_bg': '#0a0a0a',
                'button_hover': '#1a1a1a',
                'timer_bg': '#0a0a0a',
                'timer_color': '#ff0000',
                'reset_color': '#ff0000'
            }
        }
        
        self.init_ui()
        self.load_settings()
        self.hotkey_signal.connect(self.toggle_timer)
        self.last_time_str = '00:00:00'
        self.last_time_lock = threading.Lock()
        self.timer_start_dt = None
        self.timer_stop_dt = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–∫–Ω–æ —Ç–∞–π–º–µ—Ä–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        self.overlay_timer = OverlayTimerWindow()
        self.overlay_timer_visible = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.update_manager = UpdateManager(self, self.current_version)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.check_updates_on_startup()

    def init_ui(self):
        self.stacked = QStackedWidget(self)
        self.page1 = QWidget()
        self.page2 = GameSelectionPage(timer_app=self)
        self.page3 = QWidget()
        self.init_page1()
        self.page2.back_btn.clicked.connect(lambda: self.show_page(0))
        self.page2.next_btn.clicked.connect(self.start_game)
        self.init_page3()
        self.stacked.addWidget(self.page1)
        self.stacked.addWidget(self.page2)
        self.stacked.addWidget(self.page3)
        main_layout = QVBoxLayout(self)
        main_layout.addWidget(self.stacked)
        self.setLayout(main_layout)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è layout)
        self.theme_btn = QPushButton(self)
        self.theme_btn.setFixedSize(40, 40)
        self.theme_btn.setIconSize(QSize(24, 24))
        self.theme_btn.setStyleSheet('''
            QPushButton {
                background-color: rgba(123, 92, 255, 0.8);
                border: none;
                border-radius: 20px;
            }
            QPushButton:hover {
                background-color: rgba(123, 92, 255, 1.0);
            }
        ''')
        self.theme_btn.clicked.connect(self.toggle_theme)
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        self.theme_btn.move(self.width() - 50, 10)
        self.theme_btn.raise_()  # –ü–æ–¥–Ω–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã
        self.resizeEvent = self.on_resize
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.apply_theme()
        
        self.show_page(0)

    def show_page(self, idx):
        self.stacked.setCurrentIndex(idx)
        if idx == 2 and self.current_game:
            self.game_label.setText(self.current_game)
            self.update_time_display()

    def init_page1(self):
        layout = QVBoxLayout()
        self.google_btn = QPushButton('–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google', self)
        self.google_btn.clicked.connect(self.google_login)
        self.email_label = QLabel('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ', self)
        self.email_label.setAlignment(Qt.AlignCenter)
        self.ws_settings_btn = QPushButton('WebSocket –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', self)
        self.ws_settings_btn.clicked.connect(self.open_ws_settings)
        self.ws_status_label = QLabel('WebSocket: –≤—ã–∫–ª.', self)
        self.ws_status_label.setAlignment(Qt.AlignCenter)
        self.ws_link_label = QLineEdit(self)
        self.ws_link_label.setReadOnly(True)
        self.ws_link_label.setText(f'http://localhost:{self.ws_port}/')
        self.ws_link_label.hide()
        self.copy_link_btn = QPushButton('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', self)
        self.copy_link_btn.clicked.connect(self.copy_ws_link)
        self.copy_link_btn.hide()
        self.ws_toggle_btn = QPushButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä', self)
        self.ws_toggle_btn.clicked.connect(self.toggle_ws_server)
        self.html_timer_settings_btn = QPushButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ HTML —Ç–∞–π–º–µ—Ä–∞', self)
        self.html_timer_settings_btn.clicked.connect(self.open_html_timer_settings)
        

        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        self.work_dir_label = QLabel(f'–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {WORK_DIR}', self)
        self.work_dir_label.setAlignment(Qt.AlignCenter)
        self.work_dir_label.setStyleSheet('color: #888888; font-size: 11px; margin: 5px;')
        self.work_dir_label.setWordWrap(True)
        
        self.next_btn = QPushButton('–î–∞–ª–µ–µ ‚Üí', self)
        self.next_btn.clicked.connect(lambda: self.show_page(1))
        layout.addWidget(self.google_btn)
        layout.addWidget(self.email_label)
        layout.addWidget(self.ws_settings_btn)
        layout.addWidget(self.ws_status_label)
        layout.addWidget(self.ws_link_label)
        layout.addWidget(self.copy_link_btn)
        layout.addWidget(self.ws_toggle_btn)
        layout.addWidget(self.html_timer_settings_btn)
        layout.addWidget(self.work_dir_label)
        layout.addWidget(self.next_btn)
        
        # –ü—Ä–∏–∂–∏–º–∞–µ–º —Ñ—É—Ç–µ—Ä –∫ –Ω–∏–∑—É
        layout.addStretch()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä —Å –≤–µ—Ä—Å–∏–µ–π –∏ –∞–≤—Ç–æ—Ä–æ–º
        footer_layout = QHBoxLayout()
        self.version_label = QLabel(f'–í–µ—Ä—Å–∏—è: {self.current_version}', self)
        self.version_label.setStyleSheet('color: #888888; font-size: 12px;')
        self.author_label = QLabel('by DeadKDV', self)
        self.author_label.setStyleSheet('color: #888888; font-size: 12px;')
        
        footer_layout.addWidget(self.version_label)
        footer_layout.addStretch()
        footer_layout.addWidget(self.author_label)
        layout.addLayout(footer_layout)
        
        self.page1.setLayout(layout)

    def init_page3(self):
        layout = QVBoxLayout()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
        self.game_label = QLabel('', self)
        self.game_label.setAlignment(Qt.AlignCenter)
        self.game_label.setStyleSheet('font-size: 24px; color: #7b5cff; margin-bottom: 10px;')
        layout.addWidget(self.game_label)
        
        self.time_label = QLabel('00:00:00', self)
        self.time_label.setObjectName('timerLabel')
        self.time_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.time_label)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º
        btn_layout1 = QHBoxLayout()
        btn_layout1.setSpacing(12)
        
        self.start_btn = QPushButton('–°—Ç–∞—Ä—Ç')
        self.start_btn.setObjectName('startBtn')
        self.start_btn.setMinimumWidth(120)
        self.start_btn.clicked.connect(self.toggle_timer)
        btn_layout1.addWidget(self.start_btn)
        
        self.reset_btn = QPushButton('–°–±—Ä–æ—Å')
        self.reset_btn.setObjectName('resetBtn')
        self.reset_btn.setMinimumWidth(120)
        self.reset_btn.clicked.connect(self.reset_timer)
        btn_layout1.addWidget(self.reset_btn)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        self.edit_time_btn = QPushButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è')
        self.edit_time_btn.setMinimumWidth(140)
        self.edit_time_btn.clicked.connect(self.edit_time)
        btn_layout1.addWidget(self.edit_time_btn)
        
        layout.addLayout(btn_layout1)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫ - —Ä–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        btn_layout2 = QHBoxLayout()
        btn_layout2.setSpacing(12)
        
        self.countdown_btn = QPushButton('–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç')
        self.countdown_btn.setMinimumWidth(140)
        self.countdown_btn.clicked.connect(self.toggle_countdown_mode)
        btn_layout2.addWidget(self.countdown_btn)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        btn_layout2.addStretch()
        layout.addLayout(btn_layout2)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω
        self.overlay_btn = QPushButton('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω')
        self.overlay_btn.setStyleSheet('''
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #7b5cff, stop:1 #4e44ce);
                color: #fff;
                border-radius: 12px;
                padding: 10px 24px;
                font-size: 16px;
                font-weight: 500;
                border: none;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #8b6cff, stop:1 #5e54de);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #6b4cff, stop:1 #3e34be);
            }
        ''')
        self.overlay_btn.clicked.connect(self.toggle_overlay_timer)
        layout.addWidget(self.overlay_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.send_result_btn = QPushButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
        self.send_result_btn.setStyleSheet('''
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #28a745, stop:1 #20c997);
                color: #fff;
                border-radius: 12px;
                padding: 10px 24px;
                font-size: 16px;
                font-weight: 500;
                border: none;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #38b745, stop:1 #30d997);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #18a745, stop:1 #10c997);
            }
        ''')
        self.send_result_btn.clicked.connect(self.send_final_result)
        layout.addWidget(self.send_result_btn)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Ç–∫–µ—è
        hotkey_layout = QHBoxLayout()
        hotkey_layout.setSpacing(12)
        
        self.hotkey_input = QLineEdit(self)
        self.hotkey_input.setReadOnly(True)
        self.hotkey_input.setPlaceholderText('–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞')
        self.hotkey_input.setMinimumWidth(200)
        hotkey_layout.addWidget(self.hotkey_input)
        
        self.set_hotkey_btn = QPushButton('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö–æ—Ç–∫–µ–π')
        self.set_hotkey_btn.setObjectName('hotkeyBtn')
        self.set_hotkey_btn.setMinimumWidth(150)
        self.set_hotkey_btn.clicked.connect(self.start_hotkey_listen)
        hotkey_layout.addWidget(self.set_hotkey_btn)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã (—Å–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.cancel_hotkey_btn = QPushButton('–û—Ç–º–µ–Ω–∞')
        self.cancel_hotkey_btn.setObjectName('hotkeyBtn')
        self.cancel_hotkey_btn.setMinimumWidth(100)
        self.cancel_hotkey_btn.clicked.connect(self.cancel_hotkey_listen)
        self.cancel_hotkey_btn.hide()  # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        hotkey_layout.addWidget(self.cancel_hotkey_btn)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        hotkey_layout.addStretch()
        layout.addLayout(hotkey_layout)
        
        self.back_to_games_btn = QPushButton('‚Üê –ö –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã')
        self.back_to_games_btn.clicked.connect(self.back_to_games)
        layout.addWidget(self.back_to_games_btn)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.idle_notification_label = QLabel('', self)
        self.idle_notification_label.setAlignment(Qt.AlignCenter)
        self.idle_notification_label.setStyleSheet('''
            QLabel {
                color: #ff6b6b;
                font-size: 14px;
                font-weight: bold;
                padding: 8px;
                border-radius: 6px;
                background-color: rgba(255, 107, 107, 0.1);
                border: 1px solid rgba(255, 107, 107, 0.3);
            }
        ''')
        self.idle_notification_label.hide()
        layout.addWidget(self.idle_notification_label)
        
        # –ü—Ä–∏–∂–∏–º–∞–µ–º —Ñ—É—Ç–µ—Ä –∫ –Ω–∏–∑—É
        layout.addStretch()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä —Å –≤–µ—Ä—Å–∏–µ–π –∏ –∞–≤—Ç–æ—Ä–æ–º
        footer_layout = QHBoxLayout()
        version_footer = QLabel(f'–í–µ—Ä—Å–∏—è: {self.current_version}', self)
        version_footer.setStyleSheet('color: #888888; font-size: 12px;')
        author_footer = QLabel('by DeadKDV', self)
        author_footer.setStyleSheet('color: #888888; font-size: 12px;')
        
        footer_layout.addWidget(version_footer)
        footer_layout.addStretch()
        footer_layout.addWidget(author_footer)
        layout.addLayout(footer_layout)
        
        self.page3.setLayout(layout)

    def copy_ws_link(self):
        clipboard = QApplication.clipboard()
        clipboard.setText(self.ws_link_label.text())
        QMessageBox.information(self, '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞', '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!')

    def toggle_timer(self):
        print(f"HOTKEY: ‚≠ê toggle_timer –ù–ê–ß–ê–õ–°–Ø! running = {self.running}")
        try:
            if self.running:
                print(f"HOTKEY: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä")
                self.timer.stop()
                self.start_btn.setText('–°—Ç–∞—Ä—Ç')
                self.running = False
                self.timer_stop_dt = datetime.datetime.now()
                if self.current_game:
                    self.update_game_log_file()
                self.save_timer_log()
                print(f"HOTKEY: –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"HOTKEY: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä")
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
                self.stop_idle_notification_timer()
                
                self.timer.start(1000)
                self.start_btn.setText('–ü–∞—É–∑–∞')
                self.running = True
                self.timer_start_dt = datetime.datetime.now()
                print(f"HOTKEY: –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
            print(f"HOTKEY: ‚≠ê toggle_timer –ó–ê–í–ï–†–®–ò–õ–°–Ø! running = {self.running}")
        except Exception as e:
            print(f"HOTKEY: ‚ùå –û–®–ò–ë–ö–ê –≤ toggle_timer: {e}")
            import traceback
            traceback.print_exc()

    def update_time(self):
        if self.countdown_mode:
            # –†–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
            if self.seconds > 0:
                self.seconds -= 1
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
                self.real_time_during_countdown += 1
            else:
                # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
                self.timer.stop()
                self.running = False
                self.start_btn.setText('–°—Ç–∞—Ä—Ç')
                QMessageBox.information(self, '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!', 
                                      f'–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏–≥—Ä—ã "{self.current_game}" –∏—Å—Ç–µ–∫–ª–æ!')
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            self.seconds += 1
        
        self.update_time_display()
        if self.current_game:
            self.update_game_log_file()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ–º WebSocket-–∫–ª–∏–µ–Ω—Ç–∞–º
        if hasattr(self, 'ws_clients') and self.ws_clients:
            
            for ws in list(self.ws_clients):
                try:
                    if not ws.closed:
                        coro = ws.send_str(self.last_time_str)
                        if hasattr(self, '_ws_loop'):
                            asyncio.run_coroutine_threadsafe(coro, self._ws_loop)
                    else:
                        try:
                            self.ws_clients.remove(ws)
                        except:
                            pass
                except Exception as e:
                    try:
                        self.ws_clients.remove(ws)
                    except:
                        pass

    def reset_timer(self):
        reply = QMessageBox.question(self, '–°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞', 
                                   '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
                                   QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.timer.stop()
            self.seconds = 0
            self.original_seconds = 0
            self.real_time_during_countdown = 0
            self.countdown_mode = False
            self.countdown_btn.setText('–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç')
            self.countdown_btn.setStyleSheet('')
            if self.current_game:
                self.update_game_log_file()
            self.update_time_display()
            self.start_btn.setText('–°—Ç–∞—Ä—Ç')
            self.running = False
    
    def toggle_countdown_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞"""
        if self.countdown_mode:
            # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
            self.countdown_mode = False
            self.countdown_btn.setText('–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç')
            self.countdown_btn.setStyleSheet('')
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
            total_real_time = self.original_seconds + self.real_time_during_countdown
            self.seconds = total_real_time
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            self.real_time_during_countdown = 0
            
            self.update_time_display()
            QMessageBox.information(self, '–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω', 
                                  f'–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º. –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_real_time // 3600:02}:{(total_real_time % 3600) // 60:02}:{total_real_time % 60:02}')
        else:
            # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
            if not self.current_game:
                QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É!')
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
            time_to_beat = self.get_game_time_to_beat()
            if not time_to_beat or time_to_beat <= 0:
                QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–î–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω–æ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è!')
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            self.original_seconds = self.seconds
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            self.real_time_during_countdown = 0
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
            # –í—ã—á–∏—Ç–∞–µ–º —É–∂–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            self.countdown_seconds = (time_to_beat * 60) - self.seconds
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ —Å—Ä–µ–¥–Ω–µ–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
            if self.countdown_seconds < 0:
                self.countdown_seconds = 0
            self.seconds = self.countdown_seconds
            self.countdown_mode = True
            
            self.countdown_btn.setText('–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º')
            self.countdown_btn.setStyleSheet('''
                QPushButton {
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #ff6b6b, stop:1 #ee5a52);
                    color: white;
                    border-radius: 8px;
                    padding: 8px 16px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #ff7b7b, stop:1 #ff6a62);
                }
            ''')
            
            self.update_time_display()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            remaining_minutes = self.countdown_seconds // 60
            remaining_seconds = self.countdown_seconds % 60
            
            if self.countdown_seconds > 0:
                QMessageBox.information(self, '–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç', 
                                      f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç: {remaining_minutes:02}:{remaining_seconds:02}\n'
                                      f'(–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {time_to_beat} –º–∏–Ω, —É–∂–µ —Å—ã–≥—Ä–∞–Ω–æ: {self.original_seconds // 60:02}:{self.original_seconds % 60:02})')
            else:
                QMessageBox.information(self, '–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç', 
                                      f'–í—Ä–µ–º—è —É–∂–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è!\n'
                                      f'(–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {time_to_beat} –º–∏–Ω, —É–∂–µ —Å—ã–≥—Ä–∞–Ω–æ: {self.original_seconds // 60:02}:{self.original_seconds % 60:02})')
    
    def get_game_time_to_beat(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"""
        if not self.current_game:
            return None
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–≥—Ä—ã
            safe_game_name = "".join(c for c in self.current_game if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_game_name = safe_game_name.replace(' ', '_')
            fname = os.path.join(LOGS_DIR, f"timer_log_{safe_game_name}.json")
            
            if os.path.exists(fname):
                with open(fname, 'r', encoding='utf-8') as f:
                    game_data = json.load(f)
                    return game_data.get('time_to_beat_average', 0)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {e}")
        
        return None

    def start_hotkey_listen(self):
        if self.listening_hotkey:
            return
        self.listening_hotkey = True
        self.hotkey_input.setText('–ù–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à–∏...')
        
        # –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏
        self.set_hotkey_btn.setText('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
        self.set_hotkey_btn.clicked.disconnect()
        self.set_hotkey_btn.clicked.connect(self.manual_finish_hotkey)
        self.cancel_hotkey_btn.show()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        
        self.recorded_keys = []
        self.finish_timer = None
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —Å –ø–æ–º–æ—â—å—é keyboard
        try:
            keyboard.unhook_all()
            keyboard.hook(self.on_key_event)
        except Exception as e:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å —Ö–æ—Ç–∫–µ—è: {e}')
            self.cancel_hotkey_listen()

    def on_key_event(self, event):
        if not self.listening_hotkey:
            return
            
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏—à –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        key_mappings = {
            'ctrl': 'Ctrl', 'alt': 'Alt', 'shift': 'Shift',
            'space': '–ü—Ä–æ–±–µ–ª', 'enter': 'Enter', 'tab': 'Tab',
            'esc': 'Esc', 'backspace': 'Backspace', 'delete': 'Delete',
            'home': 'Home', 'end': 'End', 'page up': 'Page Up', 'page down': 'Page Down',
            'up': '‚Üë', 'down': '‚Üì', 'left': '‚Üê', 'right': '‚Üí',
            'f1': 'F1', 'f2': 'F2', 'f3': 'F3', 'f4': 'F4', 'f5': 'F5', 'f6': 'F6',
            'f7': 'F7', 'f8': 'F8', 'f9': 'F9', 'f10': 'F10', 'f11': 'F11', 'f12': 'F12',
            'caps lock': 'Caps Lock', 'num lock': 'Num Lock', 'scroll lock': 'Scroll Lock',
            'insert': 'Insert', 'pause': 'Pause', 'print screen': 'Print Screen'
        }
        
        key_name = event.name.lower()
        display_name = key_mappings.get(key_name, event.name)
        
        # –†—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if len(event.name) == 1 and ord(event.name) >= 1040:  # –†—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            display_name = event.name
        
        if event.event_type == keyboard.KEY_DOWN:
            if display_name not in self.recorded_keys:
                self.recorded_keys.append(display_name)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏—à
                current_text = '+'.join(self.recorded_keys)
                self.hotkey_input.setText(current_text)
                print(f"HOTKEY: –ó–∞–ø–∏—Å–∞–Ω–∞ –∫–ª–∞–≤–∏—à–∞ '{display_name}', —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä: {current_text}")
            
        # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–µ

    def update_hotkey_display(self):
        if self.recorded_keys:
            hotkey_str = '+'.join(self.recorded_keys)
            self.hotkey_input.setText(hotkey_str)

    def manual_finish_hotkey(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ö–æ—Ç–∫–µ–π –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        if not self.listening_hotkey:
            return
            
        if not self.recorded_keys:
            QMessageBox.warning(self, '–í–Ω–∏–º–∞–Ω–∏–µ', '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Ö–æ—Ç–∫–µ—è!')
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
        try:
            keyboard.unhook_all()
        except:
            pass
            
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ö–æ—Ç–∫–µ—è –¥–ª—è keyboard –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        keyboard_hotkey = '+'.join([key.lower() for key in self.recorded_keys])
        display_hotkey = '+'.join(self.recorded_keys)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è keyboard –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        keyboard_hotkey = keyboard_hotkey.replace('–ø—Ä–æ–±–µ–ª', 'space')
        keyboard_hotkey = keyboard_hotkey.replace('‚Üê', 'left').replace('‚Üí', 'right')
        keyboard_hotkey = keyboard_hotkey.replace('‚Üë', 'up').replace('‚Üì', 'down')
        
        print(f"HOTKEY: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö–æ—Ç–∫–µ–π. recorded_keys={self.recorded_keys}")
        print(f"HOTKEY: keyboard_hotkey='{keyboard_hotkey}', display_hotkey='{display_hotkey}'")
        
        try:
            self.set_hotkey(keyboard_hotkey, display_hotkey)
        except Exception as e:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö–æ—Ç–∫–µ–π: {e}')
            self.cancel_hotkey_listen()



    def finish_hotkey_recording(self):
        if not self.listening_hotkey or not self.recorded_keys:
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if hasattr(self, 'finish_timer') and self.finish_timer:
            self.finish_timer.stop()
            self.finish_timer = None
            
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ö–æ—Ç–∫–µ—è –¥–ª—è keyboard –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        keyboard_hotkey = '+'.join([key.lower() for key in self.recorded_keys])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è keyboard –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        keyboard_hotkey = keyboard_hotkey.replace('–ø—Ä–æ–±–µ–ª', 'space')
        keyboard_hotkey = keyboard_hotkey.replace('‚Üê', 'left').replace('‚Üí', 'right')
        keyboard_hotkey = keyboard_hotkey.replace('‚Üë', 'up').replace('‚Üì', 'down')
        
        try:
            keyboard.unhook_all()
            self.set_hotkey(keyboard_hotkey, '+'.join(self.recorded_keys))
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cancel_hotkey_listen –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ set_hotkey
        except Exception as e:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö–æ—Ç–∫–µ–π: {e}')
            self.cancel_hotkey_listen()

    def cancel_hotkey_listen(self):
        self.listening_hotkey = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(self, 'finish_timer') and self.finish_timer:
            self.finish_timer.stop()
            self.finish_timer = None
            
        try:
            keyboard.unhook_all()
        except:
            pass
            
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.hotkey_input.setText(self.hotkey_display if hasattr(self, 'hotkey_display') and self.hotkey_display else '–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞')
        self.set_hotkey_btn.setText('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö–æ—Ç–∫–µ–π')
        self.set_hotkey_btn.clicked.disconnect()
        self.set_hotkey_btn.clicked.connect(self.start_hotkey_listen)
        self.cancel_hotkey_btn.hide()  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        self.recorded_keys = []

    def keyPressEvent(self, event):
        # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ö–æ—Ç–∫–µ–µ–≤
        super().keyPressEvent(event)

    def keyReleaseEvent(self, event):
        # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ö–æ—Ç–∫–µ–µ–≤
        super().keyReleaseEvent(event)

    def set_hotkey(self, hotkey, display_hotkey=None):
        print(f"DEBUG: set_hotkey({hotkey}, {display_hotkey}) –≤—ã–∑–≤–∞–Ω")
        try:
            self.hotkey = hotkey
            self.hotkey_display = display_hotkey if display_hotkey else hotkey
            self.hotkey_input.setText(self.hotkey_display)
            self.save_settings()
            self._ignore_first_hotkey = True
            def hotkey_handler():
                print(f"DEBUG: hotkey_handler –≤—ã–∑–≤–∞–Ω –¥–ª—è {self.hotkey_display}")
                if self._ignore_first_hotkey:
                    self._ignore_first_hotkey = False
                    print("HOTKEY: –ü–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                    return
                print("HOTKEY: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª toggle_timer")
                self.hotkey_signal.emit()
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å
            self.hotkey_listener.stop_listening()
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ö–æ—Ç–∫–µ–π
            self.hotkey_listener.add_hotkey(hotkey, hotkey_handler)
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∑–∞–Ω–æ–≤–æ
            self.hotkey_listener.start_listening()
            print(f"DEBUG: add_hotkey –≤—ã–∑–≤–∞–Ω –∏–∑ set_hotkey –¥–ª—è {hotkey}")
            print(f"HOTKEY: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ö–æ—Ç–∫–µ–π '{hotkey}' (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: '{self.hotkey_display}')")
            QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'–•–æ—Ç–∫–µ–π "{self.hotkey_display}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
            if self.listening_hotkey:
                self.cancel_hotkey_listen()
        except Exception as e:
            self.hotkey_input.setText('–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞')
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö–æ—Ç–∫–µ–π: {e}')
            if self.listening_hotkey:
                self.cancel_hotkey_listen()

    def google_login(self):
        SCOPES = ['openid', 'https://www.googleapis.com/auth/userinfo.email']
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º client_secret –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            client_secret = None
            if encrypted_config:
                client_secret = encrypted_config.load_config('client_secret')
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–ª—É—à–∫—É
            if client_secret is None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–æ–π
                script_client_secret = os.path.join(os.path.dirname(__file__), 'client_secret.json')
                if os.path.exists(script_client_secret):
                    with open(script_client_secret, 'r', encoding='utf-8') as f:
                        test_data = json.load(f)
                        if test_data.get('installed', {}).get('client_id', '').startswith('your_client_id'):
                            raise Exception('client_secret.json —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù—É–∂–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ OAuth –¥–∞–Ω–Ω—ã–µ.')
                    flow = InstalledAppFlow.from_client_secrets_file(script_client_secret, SCOPES)
                else:
                    raise Exception('–§–∞–π–ª client_secret.json –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–æ–π
                if client_secret.get('installed', {}).get('client_id', '').startswith('your_client_id'):
                    raise Exception('–í –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ OAuth –¥–∞–Ω–Ω—ã–µ. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.')
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å client_secret
                import tempfile
                with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as tmp_file:
                    json.dump(client_secret, tmp_file, ensure_ascii=False, indent=2)
                    temp_file_path = tmp_file.name
                
                try:
                    flow = InstalledAppFlow.from_client_secrets_file(temp_file_path, SCOPES)
                finally:
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    try:
                        os.unlink(temp_file_path)
                    except:
                        pass
            creds = flow.run_local_server(port=0)
            # –ü–æ–ª—É—á–∞–µ–º e-mail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
            resp = requests.get('https://www.googleapis.com/oauth2/v2/userinfo',
                                headers={'Authorization': f'Bearer {creds.token}'})
            if resp.status_code == 200:
                user_info = resp.json()
                self.user_email = user_info.get('email')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º e-mail
                self.oauth_token = creds.token
                self.email_label.setText('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')
                self.save_settings()
                QMessageBox.information(self, 'Google', '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
            else:
                self.email_label.setText('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
                QMessageBox.warning(self, 'Google', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å e-mail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
        except Exception as e:
            self.email_label.setText('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
            QMessageBox.critical(self, 'Google', f'–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}')

    def toggle_ws_server(self):
        if getattr(self, 'ws_server_running', False):
            self.stop_ws_server()
        else:
            self.start_ws_server()

    def start_ws_server(self):
        if getattr(self, 'ws_server_running', False):
            return
        self.ws_status_label.setText(f'WebSocket: –ø–æ—Ä—Ç {self.ws_port}')
        self.ws_thread = threading.Thread(target=self.run_ws_http_server, daemon=True)
        self.ws_thread.start()
        self.ws_server_running = True
        self.ws_toggle_btn.setText('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä')
        self.ws_link_label.setText(f'http://localhost:{self.ws_port}/')
        self.ws_link_label.show()
        self.copy_link_btn.show()

    def stop_ws_server(self):
        if not getattr(self, 'ws_server_running', False):
            return
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Ä–≤–µ—Ä (–≥—Ä—É–±–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ _ws_loop)
        try:
            if hasattr(self, '_ws_loop'):
                self._ws_loop.call_soon_threadsafe(self._ws_loop.stop)
        except Exception:
            pass
        self.ws_status_label.setText('WebSocket: –≤—ã–∫–ª.')
        self.ws_toggle_btn.setText('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä')
        self.ws_link_label.hide()
        self.copy_link_btn.hide()
        self.ws_server_running = False

    def run_ws_http_server(self):
        try:
            asyncio.set_event_loop(asyncio.new_event_loop())
            loop = asyncio.get_event_loop()
            app = web.Application()
            app.router.add_get('/', self.handle_html)
            app.router.add_get('/ws', self.handle_ws)
            self.ws_clients = set()
            self._ws_loop = loop
            runner = web.AppRunner(app)
            loop.run_until_complete(runner.setup())
            site = web.TCPSite(runner, '0.0.0.0', self.ws_port)
            loop.run_until_complete(site.start())
            print(f'HTTP/WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.ws_port}')
            loop.create_task(self.ws_broadcast_loop())
            loop.run_forever()
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP/WebSocket —Å–µ—Ä–≤–µ—Ä–∞: {e}')

    async def handle_html(self, request):
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å live HTML —Ñ–∞–π–ª
        live_html_path = os.path.join(WORK_DIR, 'timer_live.html')
        
        if os.path.exists(live_html_path):
            try:
                with open(live_html_path, 'r', encoding='utf-8') as f:
                    html = f.read()
                print("DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è live HTML —Ñ–∞–π–ª")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                headers = {
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                }
                return web.Response(text=html, content_type='text/html', headers=headers)
            except Exception as e:
                pass
        
        # –ï—Å–ª–∏ live HTML –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –ª–µ—Ç—É
        settings = self.load_html_timer_settings()

        html = self.generate_html_with_settings(settings)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML –∫–∞–∫ live –≤–µ—Ä—Å–∏—é
        try:
            with open(live_html_path, 'w', encoding='utf-8') as f:
                f.write(html)
        except Exception as e:
            pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        headers = {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
        }
        return web.Response(text=html, content_type='text/html', headers=headers)

    async def handle_ws(self, request):
        ws = web.WebSocketResponse()
        await ws.prepare(request)
        self.ws_clients.add(ws)

        try:
            async for _ in ws:
                pass
        finally:
            self.ws_clients.remove(ws)

        return ws

    async def ws_broadcast_loop(self):
        while True:
            await asyncio.sleep(1)
            with self.last_time_lock:
                time_str = self.last_time_str
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–≥—Ä—ã
            current_game = getattr(self, 'current_game', '')
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTML —Ç–∞–π–º–µ—Ä–∞ —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
            html_settings = self.load_html_timer_settings()
            show_game_name = html_settings.get('show_game_name', False)
            

            data = {
                'time': time_str,
                'game_name': current_game if show_game_name else '',
                'show_game_name': show_game_name
            }
            msg = json.dumps(data, ensure_ascii=False)
            
            for ws in list(self.ws_clients):
                if not ws.closed:
                    try:
                        await ws.send_str(msg)
                    except:
                        try:
                            self.ws_clients.remove(ws)
                        except:
                            pass
                else:
                    try:
                        self.ws_clients.remove(ws)
                    except:
                        pass

    def save_settings(self):
        data = {
            'hotkey': self.hotkey, 
            'hotkey_display': getattr(self, 'hotkey_display', self.hotkey),
            'email': self.user_email, 
            'ws_port': self.ws_port
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        if encrypted_config:
            encrypted_config.save_config(hotkey_settings=data)
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—ã—á–Ω–æ–º —Ñ–∞–π–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f)
    def load_settings(self):
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        data = None
        if encrypted_config:
            data = encrypted_config.load_config('hotkey_settings')
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if data is None and os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
        
        if data:
                self.hotkey = data.get('hotkey')
                self.hotkey_display = data.get('hotkey_display', self.hotkey)
                self.user_email = data.get('email')
                self.ws_port = data.get('ws_port', 8765)
                if hasattr(self, 'hotkey_input'):
                    if self.hotkey:
                        self.hotkey_input.setText(self.hotkey_display or self.hotkey)
                        try:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π HotkeyListener
                            def hotkey_callback():
                                print(f"HOTKEY: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ö–æ—Ç–∫–µ–π '{self.hotkey_display}' –Ω–∞–∂–∞—Ç!")
                                self.hotkey_signal.emit()
                            self.hotkey_listener.add_hotkey(self.hotkey, hotkey_callback)
                        except Exception:
                            self.hotkey_input.setText('–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞')
                    else:
                        self.hotkey_input.setText('–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞')
                if hasattr(self, 'email_label'):
                    if self.user_email:
                        self.email_label.setText('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')
                    else:
                        self.email_label.setText('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ')
                if hasattr(self, 'ws_link_label'):
                    self.ws_link_label.setText(f'http://localhost:{self.ws_port}/')
                    self.ws_link_label.hide()
                if hasattr(self, 'copy_link_btn'):
                    self.copy_link_btn.hide()
        else:
            if hasattr(self, 'email_label'):
                self.email_label.setText('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ')
        self.ws_status_label.setText('WebSocket: –≤—ã–∫–ª.')
        self.ws_toggle_btn.setText('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä')
        self.ws_server_running = False

    def open_ws_settings(self):
        dlg = WebSocketSettingsDialog(self, self.ws_port)
        if dlg.exec_():
            self.ws_port = dlg.get_port()
            self.ws_link_label.setText(f'http://localhost:{self.ws_port}/')
            self.save_settings()
            if getattr(self, 'ws_server_running', False):
                self.stop_ws_server()
                self.start_ws_server()

    def open_html_timer_settings(self):
        dlg = HTMLTimerSettingsDialog(self)
        dlg.exec_()
    

    def check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
            QMessageBox.information(self, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", 
                                  "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            self.update_manager.check_updates()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", 
                               f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
    
    def check_updates_on_startup(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if self.update_manager.should_check_updates():
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ–Ω–µ
                import threading
                update_thread = threading.Thread(target=self._background_update_check)
                update_thread.daemon = True
                update_thread.start()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
    
    def _background_update_check(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            self.update_manager.check_updates()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
    
    def open_update_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        dlg = UpdateSettingsDialog(self)
        if dlg.exec_():
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            self.update_manager.updater.config = dlg.config

    def get_gameleague_games(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å GameLeague API"""
        if not self.user_email:
            return None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Gmail"
        
        try:
            url = f"https://back.gameleague.su/api/active-rooms/user?email={self.user_email}"
            response = requests.get(url, timeout=10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                try:
                    data = response.json()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
                    if data.get('success'):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                        if data.get('data'):
                            active_games = []
                            
                            for room in data['data']:
                                active_game = room.get('active_game')
                                if active_game:
                                    game_info = {
                                        'name': active_game.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞'),
                                        'image_url': active_game.get('image', ''),
                                        'game_id': active_game.get('id'),  # ID –∏–≥—Ä—ã
                                        'room_id': room.get('id'),  # ID –∫–æ–º–Ω–∞—Ç—ã (—ç—Ç–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è API)
                                        'time_to_beat_average': active_game.get('time_to_beat_average', 0)
                                    }
                                    active_games.append(game_info)
                            
                            if active_games:
                                return active_games, None
                            else:
                                return None, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä"
                        else:
                            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –Ω–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                            return None, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {self.user_email} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ GameLeague"
                    else:
                        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                        error_message = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        if 'not found' in error_message.lower() or '–Ω–µ –Ω–∞–π–¥–µ–Ω' in error_message.lower():
                            return None, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {self.user_email} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ GameLeague"
                        else:
                            return None, f"–û—à–∏–±–∫–∞ GameLeague: {error_message}"
                            
                except ValueError as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                    return None, f"–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—Å –Ω–∞ GameLeague, –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –≤—ã –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ google –∞–∫–∫–∞—É–Ω—Ç"
                    
            elif response.status_code == 404:
                return None, f"–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—Å –Ω–∞ GameLeague, –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –≤—ã –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ google –∞–∫–∫–∞—É–Ω—Ç"
            elif response.status_code == 500:
                return None, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ GameLeague. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                return None, f"–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—Å –Ω–∞ GameLeague, –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –≤—ã –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ google –∞–∫–∫–∞—É–Ω—Ç"
                
        except requests.exceptions.RequestException as e:
            return None, f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"
        except Exception as e:
            return None, f"–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—Å –Ω–∞ GameLeague, –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –≤—ã –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ google –∞–∫–∫–∞—É–Ω—Ç"

    def load_html_timer_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTML —Ç–∞–π–º–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if encrypted_config:
                settings = encrypted_config.load_config('html_timer_settings')
                if settings is not None:
                    return settings
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with open(HTML_TIMER_SETTINGS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                'font_family': 'Segoe UI',
                'font_size': 'medium',
                'show_game_name': False,
                'game_name_position': 'top',
                'bg_color': '#181f2a',
                'timer_color': '#ffffff',
                'timer_bg_color': '#232b3b',
                'opacity': 85,
                'border_radius': 36,
                'padding': 40,
                'show_seconds': True,
                'show_hours': True,
                'outline': False,
                'outline_color': '#000000',
                'outline_width': 2
            }

    def hex_to_rgba(self, hex_color, opacity):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HEX —Ü–≤–µ—Ç –≤ RGBA —Å –∑–∞–¥–∞–Ω–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é"""
        # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
        hex_color = hex_color.lstrip('#')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
        r = int(hex_color[0:2], 16)
        g = int(hex_color[2:4], 16)
        b = int(hex_color[4:6], 16)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å
        alpha = opacity / 100
        
        return f'rgba({r}, {g}, {b}, {alpha})'

    def generate_html_with_settings(self, settings):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        font_size_map = {
            'very_small': 'min(12vw, 20vh)',
            'small': 'min(16vw, 28vh)',
            'medium': 'min(22vw, 40vh)',
            'large': 'min(28vw, 50vh)'
        }
        
        font_family = settings.get('font_family', 'Segoe UI')
        font_size = font_size_map.get(settings.get('font_size', 'medium'), 'min(22vw, 40vh)')
        show_game_name = settings.get('show_game_name', False)
        game_name_position = settings.get('game_name_position', 'top')
        bg_color = settings.get('bg_color', '#181f2a')
        timer_color = settings.get('timer_color', '#ffffff')
        timer_bg_color = settings.get('timer_bg_color', '#232b3b')
        opacity = settings.get('opacity', 85)
        border_radius = settings.get('border_radius', 36)
        padding = settings.get('padding', 40)
        show_seconds = settings.get('show_seconds', True)
        show_hours = settings.get('show_hours', True)
        outline = settings.get('outline', False)
        outline_color = settings.get('outline_color', '#000000')
        outline_width = settings.get('outline_width', 2)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞ –≤ RGBA —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        timer_bg_rgba = f'rgba({int(timer_bg_color[1:3], 16)}, {int(timer_bg_color[3:5], 16)}, {int(timer_bg_color[5:7], 16)}, {opacity/100})'
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
        current_time = settings.get('current_time', '00:00:00')
        current_game_name = settings.get('current_game', 'Timer')
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"DEBUG: timer_bg_color = {timer_bg_color}, opacity = {opacity}, rgba = {timer_bg_rgba}")
        print(f"DEBUG: current_time = {current_time}, current_game = {current_game_name}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –æ–±–≤–æ–¥–∫–∏
        outline_style = ''
        if outline:
            # –°–æ–∑–¥–∞–µ–º –æ–±–≤–æ–¥–∫—É —Å –ø–æ–º–æ—â—å—é text-shadow
            outline_shadows = []
            for i in range(-outline_width, outline_width + 1):
                for j in range(-outline_width, outline_width + 1):
                    if i != 0 or j != 0:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
                        outline_shadows.append(f'{i}px {j}px 0 {outline_color}')
            outline_style = f'text-shadow: {", ".join(outline_shadows)};'
        
        time_format = 'HH:mm:ss' if show_hours and show_seconds else 'HH:mm' if show_hours else 'mm:ss' if show_seconds else 'mm'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã
        current_game_name = getattr(self, 'current_game', '')
        game_name_html = ''
        game_name_html_bottom = ''
        
        print(f"DEBUG: generate_html - show_game_name = {show_game_name}, current_game_name = '{current_game_name}'")
        
        if show_game_name and current_game_name:
            game_name_element = f'<div id="game-name">{current_game_name}</div>'
            if game_name_position == 'top':
                game_name_html = game_name_element
            else:
                game_name_html_bottom = game_name_element
            print(f"DEBUG: –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç game-name: {game_name_element}")
        else:
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            game_name_element = f'<div id="game-name" style="display: none;"></div>'
            if game_name_position == 'top':
                game_name_html = game_name_element
            else:
                game_name_html_bottom = game_name_element
            print(f"DEBUG: –î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç game-name")
        
        html = f'''<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="UTF-8">
<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="Expires" content="0">
<title>GameLeague Timer</title>
<style>
html, body {{
  height: 100%;
  margin: 0;
  padding: 0;
}}
body {{
  width: 100vw;
  height: 100vh;
  background: {bg_color};
  color: {timer_color};
  font-family: {font_family}, Arial, sans-serif;
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  overflow: hidden;
}}
#container {{
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}}
#game-name {{
  font-family: {font_family}, Arial, sans-serif;
  font-size: calc({font_size} * 0.4);
  font-weight: bold;
  text-align: center;
  margin: 0;
  {outline_style}
}}
#timer-bg {{
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: {padding}px;
  background: {timer_bg_rgba};
  border-radius: {border_radius}px;
  gap: calc({padding}px * 0.3);
}}
#timer {{
  display: block;
  margin: 0 auto;
  font-family: {font_family}, Arial, sans-serif;
  font-size: {font_size};
  font-weight: bold;
  text-align: center;
  user-select: none;
  letter-spacing: -0.05em;
  line-height: 1;
  {outline_style}
}}
@media (max-width: 900px) {{
  #timer {{ font-size: calc({font_size} * 0.7); }}
  #timer-bg {{ padding: calc({padding}px * 0.5); border-radius: calc({border_radius}px * 0.5); }}
  #game-name {{ font-size: calc({font_size} * 0.28); }}
}}
</style>
</head>
<body>
<div id="container">
  <div id="timer-bg">
    {game_name_html}
    <div id="timer">{current_time}</div>
    {game_name_html_bottom}
  </div>
</div>
<script>
let ws = null;
function connect() {{
  ws = new WebSocket('ws://' + window.location.hostname + ':' + window.location.port + '/ws');
  ws.onmessage = function(e) {{
    try {{
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –¥–∞–Ω–Ω—ã–µ
      let data = JSON.parse(e.data);
      let time = data.time;
      let gameName = data.game_name;
      let showGameName = data.show_game_name;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
      let gameNameElement = document.getElementById('game-name');
      if (gameNameElement) {{
        if (showGameName && gameName) {{
          gameNameElement.textContent = gameName;
          gameNameElement.style.display = 'block';
        }} else {{
          gameNameElement.style.display = 'none';
        }}
      }}
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
      let parts = time.split(':');
      if (parts.length === 3) {{
        let hours = parts[0];
        let minutes = parts[1];
        let seconds = parts[2];
        
        if ('{time_format}' === 'HH:mm:ss') {{
          time = hours + ':' + minutes + ':' + seconds;
        }} else if ('{time_format}' === 'HH:mm') {{
          time = hours + ':' + minutes;
        }} else if ('{time_format}' === 'mm:ss') {{
          time = minutes + ':' + seconds;
        }} else {{
          time = minutes;
        }}
      }}
      document.getElementById('timer').textContent = time;
    }} catch (err) {{
      // –ï—Å–ª–∏ –Ω–µ JSON, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      let time = e.data;
      let parts = time.split(':');
      if (parts.length === 3) {{
        let hours = parts[0];
        let minutes = parts[1];
        let seconds = parts[2];
        
        if ('{time_format}' === 'HH:mm:ss') {{
          time = hours + ':' + minutes + ':' + seconds;
        }} else if ('{time_format}' === 'HH:mm') {{
          time = hours + ':' + minutes;
        }} else if ('{time_format}' === 'mm:ss') {{
          time = minutes + ':' + seconds;
        }} else {{
          time = minutes;
        }}
      }}
      document.getElementById('timer').textContent = time;
    }}
  }};
  ws.onclose = function() {{ setTimeout(connect, 1000); }};
}}
connect();
</script>
</body>
</html>'''
        
        return html

    def save_timer_log(self):
        if not self.timer_start_dt or not self.timer_stop_dt or not self.current_game:
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–≥—Ä—ã
        safe_game_name = "".join(c for c in self.current_game if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_game_name = safe_game_name.replace(' ', '_')
        fname = os.path.join(LOGS_DIR, f"timer_log_{safe_game_name}.json")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        try:
            with open(fname, 'r', encoding='utf-8') as f:
                game_data = json.load(f)
        except FileNotFoundError:
            game_data = {
                'game_name': self.current_game,
                'total_time_seconds': 0,
                'total_time_str': '00:00:00',
                'sessions': []
            }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        duration = (self.timer_stop_dt - self.timer_start_dt).total_seconds()
        duration_str = str(datetime.timedelta(seconds=int(duration)))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session_data = {
            'date': self.timer_stop_dt.strftime('%Y-%m-%d'),
            'start_time': self.timer_start_dt.strftime('%Y-%m-%d %H:%M:%S'),
            'stop_time': self.timer_stop_dt.strftime('%Y-%m-%d %H:%M:%S'),
            'duration_seconds': int(duration),
            'duration_str': duration_str
        }
        game_data['sessions'].append(session_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
        game_data['total_time_seconds'] = self.seconds
        game_data['total_time_str'] = str(datetime.timedelta(seconds=self.seconds))
        game_data['last_updated'] = self.timer_stop_dt.strftime('%Y-%m-%d %H:%M:%S')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(fname, 'w', encoding='utf-8') as f:
            json.dump(game_data, f, ensure_ascii=False, indent=2)

    def edit_time(self):
        dialog = QDialog(self)
        dialog.setWindowTitle('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
        layout = QFormLayout()
        
        hours = QSpinBox(dialog)
        minutes = QSpinBox(dialog)
        seconds = QSpinBox(dialog)
        
        hours.setRange(0, 999)
        minutes.setRange(0, 59)
        seconds.setRange(0, 59)
        
        current_hours = self.seconds // 3600
        current_minutes = (self.seconds % 3600) // 60
        current_seconds = self.seconds % 60
        
        hours.setValue(current_hours)
        minutes.setValue(current_minutes)
        seconds.setValue(current_seconds)
        
        layout.addRow('–ß–∞—Å—ã:', hours)
        layout.addRow('–ú–∏–Ω—É—Ç—ã:', minutes)
        layout.addRow('–°–µ–∫—É–Ω–¥—ã:', seconds)
        
        buttons = QHBoxLayout()
        ok_button = QPushButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')
        cancel_button = QPushButton('–û—Ç–º–µ–Ω–∞')
        
        buttons.addWidget(ok_button)
        buttons.addWidget(cancel_button)
        layout.addRow(buttons)
        
        dialog.setLayout(layout)
        
        ok_button.clicked.connect(dialog.accept)
        cancel_button.clicked.connect(dialog.reject)
        
        if dialog.exec_() == QDialog.Accepted:
            self.seconds = hours.value() * 3600 + minutes.value() * 60 + seconds.value()
            if self.current_game:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
                self.update_game_log_file()
            self.update_time_display()

    def update_game_log_file(self):
        if not self.current_game:
            return
            
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–≥—Ä—ã
        safe_game_name = "".join(c for c in self.current_game if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_game_name = safe_game_name.replace(' ', '_')
        fname = os.path.join(LOGS_DIR, f"timer_log_{safe_game_name}.json")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        try:
            with open(fname, 'r', encoding='utf-8') as f:
                game_data = json.load(f)
        except FileNotFoundError:
            game_data = {
                'game_name': self.current_game,
                'image_url': '',
                'total_time_seconds': 0,
                'total_time_str': '00:00:00',
                'sessions': []
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        if self.countdown_mode:
            # –í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è + —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
            time_to_save = self.original_seconds + self.real_time_during_countdown
        else:
            # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            time_to_save = self.seconds
            
        game_data['total_time_seconds'] = time_to_save
        game_data['total_time_str'] = str(datetime.timedelta(seconds=time_to_save))
        game_data['last_updated'] = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(fname, 'w', encoding='utf-8') as f:
            json.dump(game_data, f, ensure_ascii=False, indent=2)

    def start_game(self):
        game = self.page2.get_selected_game()
        if game:
            self.current_game = game
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.seconds = self.load_game_time_from_logs(game)
            self.update_time_display()
            self.show_page(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥)
            self.start_idle_notification_timer()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ room_id –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
            room_id = self.get_room_id_for_game(game)
            if room_id:
                print(f"DEBUG: –ò–≥—Ä–∞ {game} –∏–º–µ–µ—Ç room_id: {room_id}")
            else:
                print(f"DEBUG: –ò–≥—Ä–∞ {game} –Ω–µ –∏–º–µ–µ—Ç room_id (–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å GameLeague)")
                print(f"DEBUG: –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å GameLeague")
        else:
            QMessageBox.warning(self, '–í—ã–±–æ—Ä –∏–≥—Ä—ã', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É!')

    def load_game_time_from_logs(self, game_name):
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–≥—Ä—ã
        safe_game_name = "".join(c for c in game_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_game_name = safe_game_name.replace(' ', '_')
        fname = os.path.join(LOGS_DIR, f"timer_log_{safe_game_name}.json")
        
        try:
            with open(fname, 'r', encoding='utf-8') as f:
                game_data = json.load(f)
                return game_data.get('total_time_seconds', 0)
        except FileNotFoundError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
            return 0

    def update_time_display(self):
        h = self.seconds // 3600
        m = (self.seconds % 3600) // 60
        s = self.seconds % 60
        time_str = f'{h:02}:{m:02}:{s:02}'
        
        self.time_label.setText(time_str)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –æ–∫–Ω–µ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if self.overlay_timer_visible:
            self.overlay_timer.update_time(time_str)
        
        with self.last_time_lock:
            self.last_time_str = time_str
        
        # –û–±–Ω–æ–≤–ª—è–µ–º live HTML –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)
        if getattr(self, 'ws_server_running', False):
            self.update_live_html_timer(time_str)
    
    def update_live_html_timer(self, time_str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç live HTML —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        try:
            settings = self.load_html_timer_settings()
            
            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –¥–æ–±–∞–≤–ª—è—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            settings['current_time'] = time_str
            settings['current_game'] = self.current_game if self.current_game else 'Timer'
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
            import time
            settings['timestamp'] = int(time.time())
            
            print(f"DEBUG: –û–±–Ω–æ–≤–ª—è–µ–º live HTML - –≤—Ä–µ–º—è: {time_str}, –∏–≥—Ä–∞: {settings['current_game']}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            html = self.generate_html_with_settings(settings)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML
            live_html_path = os.path.join(WORK_DIR, 'timer_live.html')
            with open(live_html_path, 'w', encoding='utf-8') as f:
                f.write(html)
            
            print(f"DEBUG: Live HTML —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {live_html_path}")
                
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è live HTML —Å –≤—Ä–µ–º–µ–Ω–µ–º: {e}")
    
    def toggle_overlay_timer(self):
        if self.overlay_timer_visible:
            self.overlay_timer.hide()
            self.overlay_timer_visible = False
            self.overlay_btn.setText('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω')
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ overlay —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
            self.overlay_timer.refresh_settings()
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ–∫–Ω–æ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞
            screen = QApplication.primaryScreen().geometry()
            self.overlay_timer.move(screen.width() - self.overlay_timer.width() - 20, 20)
            self.overlay_timer.show()
            self.overlay_timer_visible = True
            self.overlay_btn.setText('–°–∫—Ä—ã—Ç—å –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω')
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –æ–∫–Ω–µ
            self.overlay_timer.update_time(self.time_label.text())
    
    def send_final_result(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ GameLeague API"""
        if not self.current_game:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!')
            return
        
        if not self.user_email:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Google!')
            return
        
        # –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        reply1 = QMessageBox.question(self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏', 
                                     f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–≥—Ä—ã "{self.current_game}"?\n\n'
                                     f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {self.time_label.text()}\n\n'
                                     f'–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!',
                                     QMessageBox.Yes | QMessageBox.No)
        
        if reply1 != QMessageBox.Yes:
            return
        
        # –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        reply2 = QMessageBox.question(self, '–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
                                     f'–ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!\n\n'
                                     f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?\n'
                                     f'–ò–≥—Ä–∞: {self.current_game}\n'
                                     f'–í—Ä–µ–º—è: {self.time_label.text()}\n\n'
                                     f'–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–õ–¨–ó–Ø –û–¢–ú–ï–ù–ò–¢–¨!',
                                     QMessageBox.Yes | QMessageBox.No)
        
        if reply2 != QMessageBox.Yes:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º room_id –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        room_id = self.get_room_id_for_game(self.current_game)
        if not room_id:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', 
                               f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –∏–≥—Ä—ã "{self.current_game}".\n'
                               f'–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å GameLeague.')
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            url = f"https://back.gameleague.su/api/track-game-progress"
            params = {
                'email': self.user_email,
                'room_id': room_id,
                'final_time': self.seconds
            }
            
            print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ {url}")
            print(f"DEBUG: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            response = requests.post(url, params=params, timeout=10)
            print(f"DEBUG: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            print(f"DEBUG: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    if data.get('success'):
                        QMessageBox.information(self, '–£—Å–ø–µ—Ö', 
                                              f'–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n'
                                              f'–ò–≥—Ä–∞: {self.current_game}\n'
                                              f'–í—Ä–µ–º—è: {self.time_label.text()}\n'
                                              f'–°–µ—Ä–≤–µ—Ä: {data.get("message", "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—è—Ç")}')
                    else:
                        error_msg = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        QMessageBox.critical(self, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', 
                                           f'–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:\n{error_msg}')
                except ValueError:
                    QMessageBox.critical(self, '–û—à–∏–±–∫–∞', '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
            else:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 
                                   f'–û—à–∏–±–∫–∞ HTTP {response.status_code}:\n{response.text}')
                
        except requests.exceptions.RequestException as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{str(e)}')
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{str(e)}')
    
    def get_room_id_for_game(self, game_name):
        """–ü–æ–ª—É—á–∞–µ—Ç room_id –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–≥—Ä—ã
            safe_game_name = "".join(c for c in game_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_game_name = safe_game_name.replace(' ', '_')
            fname = os.path.join(LOGS_DIR, f"timer_log_{safe_game_name}.json")
            
            with open(fname, 'r', encoding='utf-8') as f:
                game_data = json.load(f)
                return game_data.get('room_id')  # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ room_id
        except (FileNotFoundError, json.JSONDecodeError, KeyError):
            return None
    
    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"""
        theme = self.themes[self.current_theme]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã
        if self.current_theme == 'light':
            # –ó–∞–≥—Ä—É–∂–∞–µ–º logo.png –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            try:
                logo_path = os.path.join(os.path.dirname(__file__), 'logo.png')
                if os.path.exists(logo_path):
                    icon = QIcon(logo_path)
                    self.theme_btn.setIcon(icon)
                else:
                    # Fallback –Ω–∞ —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                    self.theme_btn.setText('üåô')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ logo.png: {e}")
                self.theme_btn.setText('üåô')
            
            self.theme_btn.setStyleSheet(f'''
                QPushButton {{
                    background-color: rgba(123, 92, 255, 0.8);
                    border: none;
                    border-radius: 20px;
                }}
                QPushButton:hover {{
                    background-color: rgba(123, 92, 255, 1.0);
                }}
            ''')
        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º logo2.png –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            try:
                logo2_path = os.path.join(os.path.dirname(__file__), 'logo2.png')
                if os.path.exists(logo2_path):
                    icon = QIcon(logo2_path)
                    self.theme_btn.setIcon(icon)
                else:
                    # Fallback –Ω–∞ —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                    self.theme_btn.setText('‚òÄÔ∏è')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ logo2.png: {e}")
                self.theme_btn.setText('‚òÄÔ∏è')
            
            self.theme_btn.setStyleSheet(f'''
                QPushButton {{
                    background-color: rgba(255, 0, 0, 0.8);
                    border: none;
                    border-radius: 20px;
                }}
                QPushButton:hover {{
                    background-color: rgba(255, 0, 0, 1.0);
                }}
            ''')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –æ–∫–Ω—É
        self.setStyleSheet(f'''
            QWidget {{
                background-color: {theme['bg_color']};
                color: {theme['text_color']};
                font-family: Segoe UI, Arial, sans-serif;
                font-size: 16px;
            }}
            QLabel#timerLabel {{
                font-size: 56px;
                font-weight: bold;
                color: {theme['timer_color']};
                background: {theme['timer_bg']};
                border-radius: 18px;
                padding: 18px 0;
            }}
            QPushButton {{
                border-radius: 12px;
                padding: 10px 24px;
                font-size: 18px;
                font-weight: 500;
                background: {theme['button_bg']};
                color: {theme['text_color']};
                border: none;
            }}
            QPushButton#startBtn {{
                background: {theme['accent_gradient']};
                color: #fff;
            }}
            QPushButton#resetBtn {{
                background: {theme['reset_color']};
                color: #fff;
            }}
            QPushButton#hotkeyBtn {{
                background: {theme['button_bg']};
                color: {theme['accent_color']};
                border: 2px solid {theme['accent_color']};
            }}
            QLineEdit {{
                background: {theme['card_bg']};
                color: {theme['text_color']};
                border-radius: 10px;
                padding: 8px 12px;
                border: 1px solid {theme['border_color']};
                font-size: 16px;
            }}
            QLabel#footerLabel {{
                color: #888;
                font-size: 14px;
                margin-top: 10px;
                qproperty-alignment: AlignCenter;
            }}
        ''')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –æ–∫–Ω–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if hasattr(self, 'overlay_timer'):
            self.overlay_timer.apply_theme(theme)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã
        self.update()
        self.repaint()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º GameSelectionPage –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞
        if hasattr(self, 'page2'):
            self.page2.apply_theme(theme)
            self.page2.update()
            self.page2.repaint()
    
    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏"""
        self.current_theme = 'neon' if self.current_theme == 'light' else 'light'
        self.apply_theme()
    
    def on_resize(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        # –ü–µ—Ä–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ–º—ã
        if hasattr(self, 'theme_btn'):
            self.theme_btn.move(self.width() - 50, 10)
        event.accept()
    
    def start_idle_notification_timer(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.idle_seconds_remaining = 300  # 5 –º–∏–Ω—É—Ç
        self.idle_notification_timer.start(300000)  # 5 –º–∏–Ω—É—Ç = 300000 –º—Å
        self.idle_countdown_timer.start(1000)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        self.update_idle_countdown()
    
    def stop_idle_notification_timer(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.idle_notification_timer.stop()
        self.idle_countdown_timer.stop()
        if self.idle_notification_label:
            self.idle_notification_label.hide()
    
    def update_idle_countdown(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if self.idle_seconds_remaining > 0:
            self.idle_seconds_remaining -= 1
            minutes = self.idle_seconds_remaining // 60
            seconds = self.idle_seconds_remaining % 60
            
            if self.idle_notification_label:
                self.idle_notification_label.setText(
                    f"‚è∞ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–∞–π–º–µ—Ä! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {minutes:02d}:{seconds:02d}"
                )
                self.idle_notification_label.show()
        else:
            # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, —Å–∫—Ä—ã–≤–∞–µ–º –º–µ—Ç–∫—É
            if self.idle_notification_label:
                self.idle_notification_label.hide()
            self.idle_countdown_timer.stop()
    
    def show_idle_notification(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä"""
        if not self.running:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω
            QMessageBox.information(self, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 
                                  f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É "{self.current_game}", –Ω–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Ç–∞–π–º–µ—Ä —É–∂–µ 5 –º–∏–Ω—É—Ç.\n\n'
                                  f'–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å "–°—Ç–∞—Ä—Ç" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏!')
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.stop_idle_notification_timer()

    def back_to_games(self):
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∏–≥—Ä–∞–º
        self.stop_idle_notification_timer()
        
        if self.running:
            reply = QMessageBox.question(self, '–¢–∞–π–º–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç', 
                                       '–¢–∞–π–º–µ—Ä —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã?\n–≠—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç —Ç–∞–π–º–µ—Ä.',
                                       QMessageBox.Yes | QMessageBox.No)
            if reply == QMessageBox.Yes:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                self.timer.stop()
                self.start_btn.setText('–°—Ç–∞—Ä—Ç')
                self.running = False
                self.timer_stop_dt = datetime.datetime.now()
                if self.current_game:
                    self.update_game_log_file()
                self.save_timer_log()
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã
                self.show_page(1)
        else:
            # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã
            self.show_page(1)

    def closeEvent(self, event):
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π HotkeyListener
            if hasattr(self, 'hotkey_listener'):
                self.hotkey_listener.stop_listening()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ö–æ—Ç–∫–µ–µ–≤
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if self.overlay_timer_visible:
            self.overlay_timer.close()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for loader in self.page2.image_loaders.values():
            if loader.isRunning():
                loader.quit()
                loader.wait()
        
        event.accept()

def create_desktop_shortcut(target_path, shortcut_name="TGL", description="TimerGL"):
    """–°–æ–∑–¥–∞–µ—Ç —è—Ä–ª—ã–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import win32com.client
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É
        desktop = os.path.join(os.path.expanduser("~"), "Desktop")
        shortcut_path = os.path.join(desktop, f"{shortcut_name}.lnk")
        
        # –°–æ–∑–¥–∞–µ–º —è—Ä–ª—ã–∫
        shell = win32com.client.Dispatch("WScript.Shell")
        shortcut = shell.CreateShortCut(shortcut_path)
        shortcut.Targetpath = target_path
        shortcut.WorkingDirectory = os.path.dirname(target_path)
        shortcut.Description = description
        shortcut.save()
        return True
    except ImportError:
        # –ï—Å–ª–∏ win32com –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º bat-—Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —è—Ä–ª—ã–∫–∞
        try:
            desktop = os.path.join(os.path.expanduser("~"), "Desktop")
            bat_path = os.path.join(os.path.dirname(target_path), "create_shortcut.bat")
            
            bat_content = f'''@echo off
powershell "$ws = New-Object -ComObject WScript.Shell; $s = $ws.CreateShortcut('{desktop}\\{shortcut_name}.lnk'); $s.TargetPath = '{target_path}'; $s.WorkingDirectory = '{os.path.dirname(target_path)}'; $s.Description = '{description}'; $s.Save()"
del "%~f0"
'''
            
            with open(bat_path, 'w', encoding='cp1251') as f:
                f.write(bat_content)
            
            subprocess.run([bat_path], shell=True, check=True)
            return True
        except Exception:
            return False
    except Exception:
        return False

def install_to_work_dir(work_dir):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
    import sys, os
    
    exe_path = sys.executable
    exe_name = os.path.basename(exe_path)
    exe_dir = os.path.dirname(exe_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    if '--installed' in sys.argv:
        return True  # –£–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ exe —É–∂–µ –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    new_exe_path = os.path.join(work_dir, exe_name)
    if os.path.abspath(exe_path) == os.path.abspath(new_exe_path):
        return True  # –£–∂–µ –≤ –Ω—É–∂–Ω–æ–π –ø–∞–ø–∫–µ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ exe –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if os.path.exists(new_exe_path):
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é
        subprocess.Popen([new_exe_path, '--installed'])
        sys.exit(0)
        
    try:
        # –ö–æ–ø–∏—Ä—É–µ–º exe –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        shutil.copy2(exe_path, new_exe_path)
        print(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω exe-—Ñ–∞–π–ª –≤: {new_exe_path}")
        
        # –°–æ–∑–¥–∞–µ–º work_dir.json –≤ –Ω–æ–≤–æ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        try:
            work_dir_file = os.path.join(work_dir, 'work_dir.json')
            with open(work_dir_file, 'w', encoding='utf-8') as f:
                json.dump({'work_dir': work_dir}, f, ensure_ascii=False, indent=2)
            print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª work_dir.json")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è work_dir.json: {e}")
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        try:
            files_to_transfer = ['hotkey_settings.json', 'html_timer_settings.json', 'games.json']
            for file_to_transfer in files_to_transfer:
                source_path = os.path.join(exe_dir, file_to_transfer)
                if os.path.exists(source_path):
                    target_path = os.path.join(work_dir, file_to_transfer)
                    shutil.copy2(source_path, target_path)
                    print(f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω —Ñ–∞–π–ª: {file_to_transfer}")
            
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–∞–∂–Ω—ã–µ –ø–∞–ø–∫–∏
            dirs_to_transfer = ['logs']
            for dir_to_transfer in dirs_to_transfer:
                source_dir_path = os.path.join(exe_dir, dir_to_transfer)
                if os.path.exists(source_dir_path):
                    target_dir_path = os.path.join(work_dir, dir_to_transfer)
                    if os.path.exists(target_dir_path):
                        shutil.rmtree(target_dir_path)  # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    shutil.copytree(source_dir_path, target_dir_path)
                    print(f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –ø–∞–ø–∫–∞: {dir_to_transfer}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —è—Ä–ª—ã–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
        if create_desktop_shortcut(new_exe_path):
            print("–Ø—Ä–ª—ã–∫ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π exe —Å —Ñ–ª–∞–≥–æ–º --installed
        subprocess.Popen([new_exe_path, '--installed'], cwd=os.path.dirname(new_exe_path))
        print(f"–ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {work_dir}")
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞
        try:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ + work_dir.json –µ—Å–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω
            files_to_remove = ['work_dir.json', 'hotkey_settings.json', 'html_timer_settings.json', 'games.json']
            for file_to_remove in files_to_remove:
                source_path = os.path.join(exe_dir, file_to_remove)
                if os.path.exists(source_path):
                    os.remove(source_path)
                    print(f"–£–¥–∞–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {file_to_remove}")
            
            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏
            dirs_to_remove = ['logs']
            for dir_to_remove in dirs_to_remove:
                source_dir_path = os.path.join(exe_dir, dir_to_remove)
                if os.path.exists(source_dir_path):
                    shutil.rmtree(source_dir_path)
                    print(f"–£–¥–∞–ª–µ–Ω–∞ –∏—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {dir_to_remove}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
            
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π exe
        os.remove(exe_path)
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {exe_path}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
        return True
    return True

def is_installation_needed():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞"""
    import sys, os
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ - –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω --installed, –∑–Ω–∞—á–∏—Ç —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if '--installed' in sys.argv:
        return False
    
    # –¢–æ–ª—å–∫–æ –¥–ª—è exe —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    if not getattr(sys, 'frozen', False):
        return False
    
    exe_path = sys.executable
    exe_dir = os.path.dirname(exe_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä—è–¥–æ–º —Å exe
    work_dir_file = os.path.join(exe_dir, 'work_dir.json')
    if os.path.exists(work_dir_file):
        return False  # –£–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        
    # –ï—Å–ª–∏ —Ä—è–¥–æ–º –µ—Å—Ç—å –ø–∞–ø–∫–∏ logs, games.json –∏ —Ç.–¥. - —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º
    if (os.path.exists(os.path.join(exe_dir, 'logs')) or 
        os.path.exists(os.path.join(exe_dir, 'games.json'))):
        return False
    
    return True  # –ù—É–∂–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞

def main():
    app = QApplication(sys.argv)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º work_dir.json
    if getattr(sys, 'frozen', False) and is_installation_needed():  # –¢–æ–ª—å–∫–æ –¥–ª—è exe
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
        agreement_dialog = UserAgreementDialog()
        if agreement_dialog.exec_() != QDialog.Accepted:
            sys.exit(0)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        dialog = WorkDirectoryDialog()
        if dialog.exec_() == QDialog.Accepted:
            selected_work_dir = dialog.selected_dir
            install_to_work_dir(selected_work_dir)
            return  # –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        else:
            sys.exit(0)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    if not init_work_directory():
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ - –≤—ã—Ö–æ–¥–∏–º
        sys.exit(0)
    
    window = TimerApp()
    window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main() 